{"version":3,"sources":["../../components/graph/interface.ts","../../node_modules/tslib/tslib.es6.js","../../components/graph/data-source/graph-data-source.ts","../../components/graph/custom-graph-node.directive.ts","../../components/graph/graph-defs.component.ts","../../components/graph/graph-edge.directive.ts","../../components/graph/core/minimap.ts","../../components/graph/graph-minimap.component.ts","../../components/graph/graph-node.directive.ts","../../components/graph/graph-svg-container.component.ts","../../components/graph/graph.component.ts","../../components/graph/utils.ts","../../components/graph/graph.module.ts"],"names":["nzTypeDefinition","item","NZ_GRAPH_LAYOUT_SETTING","animation","duration","graph","meta","nodeSep","rankSep","edgeSep","padding","paddingTop","paddingLeft","subscene","paddingBottom","paddingRight","labelHeight","extractXOffset","extractYOffset","nodeSize","radius","width","maxLabelWidth","height","expandButtonRadius","op","labelOffset","bridge","shortcutSize","series","annotations","inboxWidth","outboxWidth","xOffset","yOffset","constant","size","minimap","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","create","__values","o","s","Symbol","iterator","m","call","next","value","done","TypeError","__read","n","e","ar","push","error","__spread","concat","NzGraphData","source","this","_data","BehaviorSubject","expansionModel","SelectionModel","_a","clear","dataSource","prototype","toggle","nodeName","expand","select","collapse","deselect","isExpanded","isSelected","collapseAll","expandAll","_b","apply","keys","compound","setData","data","connect","_this","changes","changed","merge","pipe","map","disconnect","Directive","args","selector","exportAs","Component","template","NzGraphEdgeDirective","elementRef","ngZone","line","x","y","curve","curveBasis","el","nativeElement","edge","id","v","w","ngOnInit","setElementData","setLine","adjoiningPath","getAdjoiningEdgeElement","adjoiningPoint","getPointAtLength","inbound","getTotalLength","matrixTransform","getCTM","inverse","points","index","setPath","setAttribute","adjoiningEdge","document","querySelector","ngOnChanges","_changes","onStable","take","subscribe","host","[class.nz-graph-edge-line]","[id]","ElementRef","NgZone","Input","Minimap","svg","zoomG","mainZoom","maxWandH","labelPadding","minimapElement","minimapSvgElement","viewpointElement","canvas","node","canvasRect","getBoundingClientRect","handleEvent","event","minimapOffset","Number","attr","clickCoords","pointer","viewpointCoord","updateViewpoint","dragEvent","drag","subject","on","datum","defaultPrevented","viewpoint","minimapSvg","canvasBuffer","update","minimapSize","mainX","scaleMain","scaleMinimap","mainY","transform","zoomIdentity","translate","scale","sceneSize","getBBox","svgSelection","stylesText","_c","Array","styleSheets","_d","k","cssRules","rules","_e","e_2","_f","cssText","replace","name","svgStyle","append","text","zoomGSelection","zoomTransform","Math","max","zoom","requestAnimationFrame","svgXml","XMLSerializer","serializeToString","remove","image","Image","onload","context","getContext","clearRect","drawImage","style","src","encodeURIComponent","svgRect","viewpointSelection","viewpointWidth","viewpointHeight","mapWidth","mapHeight","min","classList","add","NzGraphMinimapComponent","init","svgEle","zoomEle","zoomBehavior","[class.nz-graph-minimap]","NzGraphNodeDirective","builder","renderer2","nodeClick","EventEmitter","animationInfo","animationPlayer","onTriggerClick","preventDefault","emit","makeAnimation","isFirstChange","animationFactory","destroy","cur","getAnimationInfo","pre","assign","build","query","group","animate","done$","Subject","play","onDone","complete","asObservable","nodeTransform","computeCXPositionOfNodeShape","expanded","coreBox","ngAfterViewInit","[class.nz-graph-node-expanded]","[class.nz-graph-group-node]","[class.nz-graph-base-node]","(click)","AnimationBuilder","Renderer2","Output","NzGraphSvgContainerComponent","cdr","maxZoomLevel","minZoomLevel","zoomEvent","transformEvent","transformStyle","bind","ngOnDestroy","unbind","svgSelect","containerElement","zoomController","scaleExtent","detectChanges","interrupt","selectAll","fit","zoomElement","fitScale","dx","dy","params","transition","setNodeToCenter","contains","position","getRelativePositionInfo","svgTransform","centerX","topLeft","bottomRight","centerY","left","top","translateBy","nodeBox","nodeCtm","getScreenCTM","pointTL","createSVGPoint","pointBR","isDataSource","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","[class.nz-graph-svg-container]","ChangeDetectorRef","ViewChild","static","NzGraphComponent","nzRankDirection","nzShowMinimap","nzShowArrow","nzZoom","nzAutoSize","nzGraphInitialized","nzZoomInit","nzTransformEvent","nzNodeClick","renderInfo","mapOfNodeAttr","mapOfEdgeAttr","customNodeTemplate","typedNodes","layoutSetting","destroy$","nodeTrackByFun","_","edgeTrackByFun","subGraphTransform","coreTransform","detach","nzGraphData","_switchDataSource","nzAutoFit","nzGraphLayoutSettings","firstChange","renderGraph","rankDirection","selected","markForCheck","autoFit","drawMinimap","ngAfterContentChecked","_dataSubscription","observeRenderChanges","unsubscribe","triggerTransform","$event","clickNode","svgContainerComponent","toggleNode","options","buildGraphInfo","setRenderInfo","resizeNodes","dataStream","graphOptions","Error","takeUntil","asPatch","assignRenderInfo","makeNodesAnimation","parseInfo","buildGraph","dig","nodes","forEach","type","hasOwnProperty","edges","querySelectorAll","nodeEle","contentEle","targetNode","flattenNodes","find","nodeName_1","newRenderInfo","forkJoin","graphNodes","tap","finalize","forceRerender","[class.nz-graph]","[class.nz-graph-auto-fit]","ViewChildren","ContentChild","NzCustomGraphNodeDirective","read","TemplateRef","InputBoolean","COMPONENTS","NzGraphDefsComponent","NgModule","declarations","imports","CommonModule","NzIconModule","NzSpinModule","exports"],"mappings":"wrCA0DgBA,IACd,OAAO,SAAAC,GAAQ,OAAAA,OAaJC,EAA2C,CACtDC,UAAW,CAETC,SAAU,KAEZC,MAAO,CAELC,KAAM,CAOJC,QAAS,GAOTC,QAAS,GAKTC,QAAS,GAOXC,QAAS,CAAEC,WAAY,GAAIC,YAAa,IAE1CC,SAAU,CACRP,KAAM,CACJK,WAAY,GACZG,cAAe,GACfF,YAAa,GACbG,aAAc,GAKdC,YAAa,GAEbC,eAAgB,EAEhBC,eAAgB,IAGpBC,SAAU,CAERb,KAAM,CACJc,OAAQ,EACRC,MAAO,IACPC,cAAe,EAIfC,OAAQ,IAERC,mBAAoB,GAGtBC,GAAI,CACFJ,MAAO,IACPE,OAAQ,IACRH,OAAQ,EACRM,YAAa,GACbJ,cAAe,IAGjBK,OAAQ,CAINN,MAAO,GACPE,OAAQ,GACRH,OAAQ,EACRM,YAAa,IAGjBE,aAAc,CAEZH,GAAI,CAAEJ,MAAO,GAAIE,OAAQ,GAEzBjB,KAAM,CAAEe,MAAO,GAAIE,OAAQ,EAAGH,OAAQ,GAEtCS,OAAQ,CACNR,MAAO,GACPE,OAAQ,IAGZO,YAAa,CAEXC,WAAY,GAEZC,YAAa,GAEbC,QAAS,GAETC,QAAS,EAETR,YAAa,EAEbJ,cAAe,KAEjBa,SAAU,CAAEC,KAAM,CAAEf,MAAO,EAAGE,OAAQ,IACtCc,QAAS,CAEPD,KAAM;;;;;;;;;;;;;;6FCpIME,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HC,EAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,EACrH,GAAuB,iBAAZQ,SAAoD,mBAArBA,QAAQC,SAAyBJ,EAAIG,QAAQC,SAASZ,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIU,EAAIb,EAAWO,OAAS,EAAGM,GAAK,EAAGA,KAAST,EAAIJ,EAAWa,MAAIL,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,GAChJ,OAAOH,EAAI,GAAKG,GAAKC,OAAOK,eAAeb,EAAQC,EAAKM,GAAIA,WAOhDO,EAAWC,EAAaC,GACpC,GAAuB,iBAAZN,SAAoD,mBAArBA,QAAQO,SAAyB,OAAOP,QAAQO,SAASF,EAAaC,GAyCvFR,OAAOU,gBAYpBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBA,OAAOC,SAAUC,EAAIH,GAAKD,EAAEC,GAAIT,EAAI,EAC5E,GAAIY,EAAG,OAAOA,EAAEC,KAAKL,GACrB,GAAIA,GAAyB,iBAAbA,EAAEd,OAAqB,MAAO,CAC1CoB,KAAM,WAEF,OADIN,GAAKR,GAAKQ,EAAEd,SAAQc,OAAI,GACrB,CAAEO,MAAOP,GAAKA,EAAER,KAAMgB,MAAOR,KAG5C,MAAM,IAAIS,UAAUR,EAAI,0BAA4B,4CAGxCS,EAAOV,EAAGW,GACtB,IAAIP,EAAsB,mBAAXF,QAAyBF,EAAEE,OAAOC,UACjD,IAAKC,EAAG,OAAOJ,EACf,IAAmBb,EAAYyB,EAA3BpB,EAAIY,EAAEC,KAAKL,GAAOa,EAAK,GAC3B,IACI,WAAc,IAANF,GAAgBA,KAAM,MAAQxB,EAAIK,EAAEc,QAAQE,MAAMK,EAAGC,KAAK3B,EAAEoB,OAExE,MAAOQ,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQ5B,IAAMA,EAAEqB,OAASJ,EAAIZ,EAAU,SAAIY,EAAEC,KAAKb,WAExC,GAAIoB,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,WAGKG,IACZ,IAAK,IAAIH,EAAK,GAAIrB,EAAI,EAAGA,EAAIP,UAAUC,OAAQM,IAC3CqB,EAAKA,EAAGI,OAAOP,EAAOzB,UAAUO,KACpC,OAAOqB,EA8CczB,OAAOU,wBC/I9B,SAAAoB,EAAYC,SAxCJC,KAAAC,MAAQ,IAAIC,EAAAA,gBAAgC,IAGpDF,KAAAG,eAAyC,IAAIC,EAAAA,gBAAuB,GAsC9DL,IACiB,QAAnBM,EAAAL,KAAKG,sBAAc,IAAAE,GAAAA,EAAEC,QACrBN,KAAKO,WAAaR,EAClBC,KAAKC,MAAMf,KAAKa,WAtCpBD,EAAAU,UAAAC,OAAA,SAAOC,GACLV,KAAKG,eAAeM,OAAOC,IAI7BZ,EAAAU,UAAAG,OAAA,SAAOD,GACLV,KAAKG,eAAeS,OAAOF,IAI7BZ,EAAAU,UAAAK,SAAA,SAASH,GACPV,KAAKG,eAAeW,SAASJ,IAI/BZ,EAAAU,UAAAO,WAAA,SAAWL,GACT,OAAOV,KAAKG,eAAea,WAAWN,IAIxCZ,EAAAU,UAAAS,YAAA,WACEjB,KAAKG,eAAeG,SAGtBR,EAAAU,UAAAU,UAAA,kBACEC,EAAAnB,KAAKG,gBAAeS,OAAMQ,MAAAD,EAAAvB,EAAI5B,OAAOqD,KAAKrB,KAAKC,MAAMd,MAAMmC,UAAY,OAGzExB,EAAAU,UAAAe,QAAA,SAAQC,SACa,QAAnBnB,EAAAL,KAAKG,sBAAc,IAAAE,GAAAA,EAAEC,QACrBN,KAAKO,WAAaiB,EAClBxB,KAAKC,MAAMf,KAAKsC,IAWlB1B,EAAAU,UAAAiB,QAAA,WAAA,IAAAC,EAAA1B,KACQ2B,EAAU,CAAC3B,KAAKC,MAAOD,KAAKG,eAAeyB,SACjD,OAAOC,EAAAA,MAAKT,WAAA,EAAAxB,EAAI+B,IAASG,KAAKC,EAAAA,KAAI,WAAM,OAAAL,EAAKzB,MAAMd,WAGrDW,EAAAU,UAAAwB,WAAA,oBCtDF,iCAJCC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,gBACVC,SAAU,wBCgBV,iCAlBDC,EAAAA,UAASH,KAAA,CAAC,CACTC,SAAU,0BACVG,SAAU,4WCqBV,SAAAC,EAAoBC,EAAgDC,GAAhDzC,KAAAwC,WAAAA,EAAgDxC,KAAAyC,OAAAA,EALnDzC,KAAA0C,KAAOA,EAAAA,OACrBC,GAAE,SAAAhF,GAAK,OAAAA,EAAEgF,KACTC,GAAE,SAAAjF,GAAK,OAAAA,EAAEiF,KACTC,MAAMC,EAAAA,YAGP9C,KAAK+C,GAAK/C,KAAKwC,WAAWQ,qBAX5BhF,OAAAK,eAAWkE,EAAA/B,UAAA,KAAE,KAAb,iBACE,OAAgB,QAATH,EAAAL,KAAKiD,YAAI,IAAA5C,OAAA,EAAAA,EAAE6C,KAASlD,KAAKiD,KAAKE,EAAC,KAAKnD,KAAKiD,KAAKG,mCAavDb,EAAA/B,UAAA6C,SAAA,WACErD,KAAKsD,kBAGPf,EAAA/B,UAAA+C,QAAA,WACE,IAAMC,EAAgBxD,KAAKyD,0BAE3B,GAAID,EAAe,CACjB,IAAME,EAAiBF,EACpBG,iBAAiB3D,KAAKiD,KAAKW,QAAUJ,EAAcK,iBAAmB,GACtEC,gBAAgBN,EAAcO,UAC9BD,gBAAgB9D,KAAK+C,GAAGgB,SAAUC,WAC/BC,EAAMrE,EAAOI,KAAKiD,KAAKgB,QACvBC,EAAQlE,KAAKiD,KAAKW,QAAU,EAAIK,EAAOnG,OAAS,EACtDmG,EAAOC,GAAOvB,EAAIe,EAAef,EACjCsB,EAAOC,GAAOtB,EAAIc,EAAed,EACjC5C,KAAKmE,QAAQnE,KAAK0C,KAAKuB,SAEvBjE,KAAKmE,QAAQnE,KAAK0C,KAAK1C,KAAKiD,KAAKgB,UAIrC1B,EAAA/B,UAAA2D,QAAA,SAAQxG,GACNqC,KAAK+C,GAAGqB,aAAa,IAAKzG,IAG5B4E,EAAA/B,UAAA8C,eAAA,WACEtD,KAAK+C,GAAGqB,aAAa,YAAgBpE,KAAKiD,KAAKE,EAAC,KAAKnD,KAAKiD,KAAKG,GAC/DpD,KAAK+C,GAAGqB,aAAa,SAAU,GAAGpE,KAAKiD,KAAKE,GAC5CnD,KAAK+C,GAAGqB,aAAa,SAAU,GAAGpE,KAAKiD,KAAKG,IAG9Cb,EAAA/B,UAAAiD,wBAAA,WACE,IAAMY,EAAgBrE,KAAKiD,KAAKoB,cAChC,OAAIA,EACKC,SAASC,cAAc,mBAAmBF,EAAclB,EAAC,KAAKkB,EAAcjB,EAAC,MAE7E,MAIXb,EAAA/B,UAAAgE,YAAA,SAAYC,GAAZ,IAAA/C,EAAA1B,KACEA,KAAKyC,OAAOiC,SAAS5C,KAAK6C,EAAAA,KAAK,IAAIC,WAAU,WAC3ClD,EAAK6B,uCAnEVtB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,0BACV0C,KAAM,CACJC,6BAA8B,OAC9BC,OAAQ,mDATQC,EAAAA,kBAAmBC,EAAAA,wCAapCC,EAAAA,SCRH,IAEAC,EAAA,WAmBE,SAAAA,EACEC,EACAC,EACAC,EACAjI,EACAkI,EACAC,GANF,IAAA9D,EAAA1B,KAQEA,KAAKoF,IAAMA,EACXpF,KAAKwF,aAAeA,EACpBxF,KAAKqF,MAAQA,EACbrF,KAAKsF,SAAWA,EAChBtF,KAAKuF,SAAWA,EAChB,IAAME,EAAiB7E,EAAAA,OAAOvD,GACxBqI,EAAoBD,EAAe7E,OAAO,OAC1C+E,EAAmBD,EAAkB9E,OAAO,QAClDZ,KAAK4F,OAASH,EAAe7E,OAAO,mBAAmBiF,OACvD7F,KAAK8F,WAAa9F,KAAK4F,OAAOG,wBAE9B,IAAMC,EAAc,SAACC,GACnB,IAAMC,EAAgBxE,EAAKwE,gBACrB7J,EAAQ8J,OAAOR,EAAiBS,KAAK,UACrC7J,EAAS4J,OAAOR,EAAiBS,KAAK,WACtCC,EAAcC,EAAAA,QAAQL,EAAOP,EAAkBG,QACrDnE,EAAK6E,eAAe5D,EAAI0D,EAAY,GAAKhK,EAAQ,EAAI6J,EAAcvD,EACnEjB,EAAK6E,eAAe3D,EAAIyD,EAAY,GAAK9J,EAAS,EAAI2J,EAActD,EACpElB,EAAK8E,mBAEPxG,KAAKuG,eAAiB,CAAE5D,EAAG,EAAGC,EAAG,GACjC,IAAM6D,EAAYC,EAAAA,OAAOC,QAAQ3I,QAAQ4I,GAAG,OAAQZ,GACpDL,EAAiBkB,MAAM7G,KAAKuG,gBAA6BtH,KAAKwH,GAG9Df,EAAkBkB,GAAG,SAAS,SAAAX,GACvBA,EAAgBa,kBAIrBd,EAAYC,MAEdjG,KAAK+G,UAAYpB,EAAiBE,OAClC7F,KAAKgH,WAAatB,EAAkBG,OACpC7F,KAAK3C,QAAUA,EACf2C,KAAKiH,aAAexB,EAAe7E,OAAO,iBAAiBiF,OAC3D7F,KAAKkH,gBAGC/B,EAAA3E,UAAA0F,cAAA,WACN,MAAO,CACLvD,GAAI3C,KAAK8F,WAAWzJ,MAAQ2D,KAAKmH,YAAY9K,OAAS,EACtDuG,GAAI5C,KAAK8F,WAAWvJ,OAASyD,KAAKmH,YAAY5K,QAAU,IAIpD4I,EAAA3E,UAAAgG,gBAAA,WAEN5F,EAAAA,OAAOZ,KAAK+G,WAAWX,KAAK,IAAKpG,KAAKuG,eAAe5D,GAAGyD,KAAK,IAAKpG,KAAKuG,eAAe3D,GAGtF,IAAMwE,GAAUpH,KAAKuG,eAAe5D,EAAI3C,KAAKqH,UAAarH,KAAKsH,aACzDC,GAAUvH,KAAKuG,eAAe3D,EAAI5C,KAAKqH,UAAarH,KAAKsH,aAC/D1G,EAAAA,OAAOZ,KAAKoF,KAAKnG,KAAKe,KAAKsF,SAASkC,UAAWC,EAAAA,aAAaC,UAAUN,EAAOG,GAAOI,MAAM3H,KAAKqH,aAGjGlC,EAAA3E,UAAA0G,OAAA,uBAAAxF,EAAA1B,KACM4H,EAAY,KAChB,IAGE,GAAwB,KADxBA,EAAY5H,KAAKqF,MAAMwC,WACTxL,MAEZ,OAEF,MAAOmD,GAGP,OAGF,IAAMsI,EAAelH,EAAAA,OAAOZ,KAAKoF,KAI7B2C,EAAa,OAEjB,IAAgB,IAAAC,EAAArJ,EAAA,IAAIsJ,MAAM3D,SAAS4D,YAAYpK,QAAQuD,QAAM8G,EAAAH,EAAA9I,QAAAiJ,EAAA/I,KAAA+I,EAAAH,EAAA9I,OAAE,CAA1D,IAAMkJ,EAACD,EAAAhJ,MACV,IACE,IAAMkJ,EAAY/D,SAAS4D,YAAYE,GAAiBC,UAAa/D,SAAS4D,YAAYE,GAAiBE,MAC3G,GAAgB,MAAZD,EACF,aAEF,IAAgB,IAAAE,GAAAC,OAAA,EAAA7J,EAAA,IAAIsJ,MAAMI,EAASvK,QAAQuD,SAAMoH,EAAAF,EAAArJ,QAAAuJ,EAAArJ,KAAAqJ,EAAAF,EAAArJ,OAAE,CAEjD6I,GAAcM,EAFJI,EAAAtJ,OAEgBuJ,QAAQC,QAAQ,iBAAkB,IAAM,wGAEpE,MAAOnJ,GACP,GAAe,kBAAXA,EAAEoJ,KACJ,MAAMpJ,qGAMZ,IAAMqJ,EAAWf,EAAagB,OAAO,SACrCD,EAASE,KAAKhB,GAId,IAAMiB,EAAiBpI,EAAAA,OAAOZ,KAAKqF,OAC7B4D,EAAgBD,EAAe5C,KAAK,aAC1C4C,EAAe5C,KAAK,YAAa,MAGjCwB,EAAUrL,QAA8B,EAApByD,KAAKwF,aACzBoC,EAAUvL,OAA6B,EAApB2D,KAAKwF,aAKxBsC,EAAa1B,KAAK,QAASwB,EAAUvL,OAAO+J,KAAK,SAAUwB,EAAUrL,QAMrEyD,KAAKsH,aAAetH,KAAKuF,SAAW2D,KAAKC,IAAIvB,EAAUvL,MAAOuL,EAAUrL,QACxEyD,KAAKmH,YAAc,CACjB9K,MAAOuL,EAAUvL,MAAQ2D,KAAKsH,aAC9B/K,OAAQqL,EAAUrL,OAASyD,KAAKsH,cAGlC,IAAMpB,EAAgBlG,KAAKkG,gBAI3BtF,EAAAA,OAAOZ,KAAKgH,YAAYZ,KAAKpG,KAAKmH,aAClCvG,EAAAA,OAAOZ,KAAKiH,cAAcb,KAAKpG,KAAKmH,aAEd,MAAlBnH,KAAK0H,WAAkC,MAAb1H,KAAKoJ,MAGjCC,uBAAsB,WAAM,OAAA3H,EAAK0H,UAKnC,IAAME,GAAS,IAAIC,eAAgBC,kBAAkBxJ,KAAKoF,KAK1DyD,EAASY,SACT3B,EAAa1B,KAAK,QAAS,QAAQA,KAAK,SAAU,QAElD4C,EAAe5C,KAAK,YAAa6C,GAEjC,IAAMS,EAAQ,IAAIC,MAClBD,EAAME,OAAS,WAEb,IAAMC,EAAUnI,EAAKuF,aAAa6C,WAAW,MAC7CD,EAASE,UAAU,EAAG,EAAGrI,EAAKuF,aAAa5K,MAAOqF,EAAKuF,aAAa1K,QAEpEsN,EAASG,UAAUN,EAAOxD,EAAcvD,EAAGuD,EAActD,EAAGlB,EAAKyF,YAAY9K,MAAOqF,EAAKyF,YAAY5K,QACrG8M,uBAAsB,iBAEpBzI,EAAAA,OAAOc,EAAKuF,cAAcgD,MAAM,UAAW,SAC3CrJ,EAAAA,OAAOc,EAAKkE,QAAQqE,MAAM,UAAW,QAErC5J,EAAAf,EAAmC,CAACoC,EAAKuF,aAAcvF,EAAKkE,QAAO,GAAlElE,EAAKkE,OAAMvF,EAAA,GAAEqB,EAAKuF,aAAY5G,EAAA,OAGnCqJ,EAAMQ,IAAM,oCAAsCC,mBAAmBb,IASvEnE,EAAA3E,UAAA4I,KAAA,SAAK5B,GACH,GAAyB,MAArBxH,KAAKsH,aAAT,CAKIE,IACFxH,KAAK0H,UAAY,CAACF,EAAU7E,EAAG6E,EAAU5E,GACzC5C,KAAKqH,UAAYG,EAAUY,GAI7B,IAAMgC,EAAUpK,KAAKoF,IAAIW,wBACnBG,EAAgBlG,KAAKkG,gBACrBmE,EAAqBzJ,EAAAA,OAAOZ,KAAK+G,WACvC/G,KAAKuG,eAAe5D,GAAM3C,KAAK0H,UAAU,GAAK1H,KAAKsH,aAAgBtH,KAAKqH,UACxErH,KAAKuG,eAAe3D,GAAM5C,KAAK0H,UAAU,GAAK1H,KAAKsH,aAAgBtH,KAAKqH,UACxE,IAAMiD,EAAkBF,EAAQ/N,MAAQ2D,KAAKsH,aAAgBtH,KAAKqH,UAC5DkD,EAAmBH,EAAQ7N,OAASyD,KAAKsH,aAAgBtH,KAAKqH,UACpEgD,EACGjE,KAAK,IAAKpG,KAAKuG,eAAe5D,EAAIuD,EAAcvD,GAChDyD,KAAK,IAAKpG,KAAKuG,eAAe3D,EAAIsD,EAActD,GAChDwD,KAAK,QAASkE,GACdlE,KAAK,SAAUmE,GAGlB,IAAMC,EAAWxK,KAAKmH,YAAY9K,MAC5BoO,EAAYzK,KAAKmH,YAAY5K,OAC7BoG,EAAI3C,KAAKuG,eAAe5D,EACxBC,EAAI5C,KAAKuG,eAAe3D,GACpBsG,KAAKwB,IAAIxB,KAAKC,IAAI,EAAGxG,EAAI2H,GAAiBE,GAAYtB,KAAKwB,IAAIxB,KAAKC,IAAI,EAAGxG,GAAI6H,KAC/EtB,KAAKwB,IAAIxB,KAAKC,IAAI,EAAGvG,EAAI2H,GAAkBE,GAAavB,KAAKwB,IAAIxB,KAAKC,IAAI,EAAGvG,GAAI6H,KAC1DD,EAAWC,GAzOpB,GA2OtBzK,KAAK3C,QAAQsN,UAAUlB,OAAO,UAE9BzJ,KAAK3C,QAAQsN,UAAUC,IAAI,cA3OjC,gBC4BE,SAAAC,EAAoBrI,GAAAxC,KAAAwC,WAAAA,SAEpBqI,EAAArK,UAAA6C,SAAA,aAEAwH,EAAArK,UAAAsK,KAAA,SAAKC,EAAuBC,EAAsBC,GAChDjL,KAAK3C,QAAU,IAAI8H,EACjB4F,EACAC,EACAC,EACAjL,KAAKwC,WAAWQ,cAChB9H,EAAwBmC,QAAQD,KAChClC,EAAwBW,SAASP,KAAKU,cAI1C6O,EAAArK,UAAA4I,KAAA,SAAK5B,GACCxH,KAAK3C,SACP2C,KAAK3C,QAAQ+L,KAAK5B,IAItBqD,EAAArK,UAAA0G,OAAA,WACMlH,KAAK3C,SACP2C,KAAK3C,QAAQ6J,mCApDlB7E,EAAAA,UAASH,KAAA,CAAC,CACTC,SAAU,mBACVG,SAAU,izBAqBVuC,KAAM,CACJqG,2BAA4B,qDA9BZlG,EAAAA,+BCmClB,SAAAmG,EAAoBpI,EAAwBqI,EAAmCC,GAA3DrL,KAAA+C,GAAAA,EAAwB/C,KAAAoL,QAAAA,EAAmCpL,KAAAqL,UAAAA,EAX5DrL,KAAAsL,UAA0D,IAAIC,EAAAA,aAOjFvL,KAAAwL,cAA6B,KAErBxL,KAAAyL,gBAA0C,YAPlDN,EAAA3K,UAAAkL,eAAA,SAAezF,GACbA,EAAM0F,iBACN3L,KAAKsL,UAAUM,KAAK5L,KAAK6F,OAS3BsF,EAAA3K,UAAAqL,cAAA,SAAcC,GAAd,IAIMC,EAJNrK,EAAA1B,UAAc,IAAA8L,IAAAA,GAAA,GACR9L,KAAKyL,iBACPzL,KAAKyL,gBAAgBO,UAGvB,IAAMC,EAAMjM,KAAKkM,mBACXC,EAAMnO,OAAAoO,OAAA,GAAKpM,KAAKwL,eAGpBO,EADED,EACiB9L,KAAKoL,QAAQiB,MAAM,CACpCpC,EAAAA,MAAM,CAAEzC,UAAW,aAAayE,EAAItJ,EAAC,OAAOsJ,EAAIrJ,EAAC,QACjD0J,EAAAA,MAAM,sBAAuB,CAC3BrC,EAAAA,MAAM,CACJ5N,MAAU4P,EAAI5P,MAAK,KACnBE,OAAW0P,EAAI1P,OAAM,WAKRyD,KAAKoL,QAAQiB,MAAM,CACpCpC,EAAAA,MAAM,CAAEzC,UAAW,aAAa2E,EAAKxJ,EAAC,OAAOwJ,EAAKvJ,EAAC,QACnD0J,EAAAA,MAAM,sBAAuB,CAC3BrC,EAAAA,MAAM,CACJ5N,MAAU8P,EAAK9P,MAAK,KACpBE,OAAW4P,EAAK5P,OAAM,SAG1BgQ,EAAAA,MAAM,CACJD,EAAAA,MAAM,sBAAuB,CAC3BE,EAAAA,QACE,iBACAvC,EAAAA,MAAM,CACJ5N,MAAU4P,EAAI5P,MAAK,KACnBE,OAAW0P,EAAI1P,OAAM,UAI3BiQ,EAAAA,QAAQ,iBAAkBvC,EAAAA,MAAM,CAAEzC,UAAW,aAAayE,EAAItJ,EAAC,OAAOsJ,EAAIrJ,EAAC,aAIjF,IAAM6J,EAAQ,IAAIC,EAAAA,QAUlB,OATA1M,KAAKwL,cAAgBS,EACrBjM,KAAKyL,gBAAkBM,EAAiBrN,OAAOsB,KAAK+C,GAAGC,eACvDhD,KAAKyL,gBAAgBkB,OACrB3M,KAAKyL,gBAAgBmB,QAAO,WAE1BlL,EAAK2J,UAAUjH,aAAa1C,EAAKqB,GAAGC,cAAe,YAAa,aAAaiJ,EAAItJ,EAAC,KAAKsJ,EAAIrJ,EAAC,KAC5F6J,EAAMvN,OACNuN,EAAMI,cAEDJ,EAAMK,gBAGf3B,EAAA3K,UAAA0L,iBAAA,WACQ,IAAA7L,EAAWL,KAAK+M,gBAAdpK,EAACtC,EAAAsC,EAAEC,EAACvC,EAAAuC,EACZ,MAAO,CACLvG,MAAO2D,KAAK6F,KAAKxJ,MACjBE,OAAQyD,KAAK6F,KAAKtJ,OAClBoG,EAACA,EACDC,EAACA,IAILuI,EAAA3K,UAAAuM,cAAA,WAGE,MAAO,CAAEpK,EAFC3C,KAAKgN,+BAAiChN,KAAK6F,KAAKxJ,MAAQ,EAEtDuG,EADF5C,KAAK6F,KAAKjD,EAAI5C,KAAK6F,KAAKtJ,OAAS,IAI7C4O,EAAA3K,UAAAwM,6BAAA,WACE,OAAKhN,KAAK6F,KAA0BoH,SAC3BjN,KAAK6F,KAAKlD,EAEZ3C,KAAK6F,KAAKlD,EAAI3C,KAAK6F,KAAKxJ,MAAQ,EAAI2D,KAAK6F,KAAKqH,QAAQ7Q,MAAQ,GAGvE8O,EAAA3K,UAAA2M,gBAAA,WACEnN,KAAK6L,eAAc,6BAvGtB5J,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACV0C,KAAM,CACJE,OAAQ,uBACRqI,iCAAkC,gBAClCC,8BAA+B,gBAC/BC,6BAA8B,gBAC9BC,UAAW,uEAlBoBvI,EAAAA,kBADjBwI,EAAAA,wBAC0DC,EAAAA,2CAsBzEvI,EAAAA,yBACAwI,EAAAA,2BCuCD,SAAAC,EAAoBC,GAAA5N,KAAA4N,IAAAA,EAXX5N,KAAA6N,aAAe,GACf7N,KAAA8N,aAAe,GACf9N,KAAAoJ,KAAO,EAEGpJ,KAAA+N,UAAkC,IAAIxC,EAAAA,aACtCvL,KAAAgO,eAAgD,IAAIzC,EAAAA,aACvEvL,KAAAwH,UAA6B,CAAE7E,EAAG,EAAGC,EAAG,EAAGwF,EAAG,GAC9CpI,KAAAiO,eAAiB,UAMjBN,EAAAnN,UAAA6C,SAAA,WACErD,KAAKkO,QAGPP,EAAAnN,UAAA2N,YAAA,WACEnO,KAAKoO,UAGPT,EAAAnN,UAAA0N,KAAA,WAAA,IAAAxM,EAAA1B,KACEA,KAAKqO,UAAYzN,EAAAA,OAAOZ,KAAKsO,iBAAiBtL,eAC9ChD,KAAKuO,eAAiBnF,EAAAA,OACnBoF,YAAY,CAACxO,KAAK8N,aAAc9N,KAAK6N,eACrCjH,GAAG,QAAQ,SAACzF,OAAEqG,EAASrG,EAAAqG,UACd7E,EAAY6E,EAAS7E,EAAlBC,EAAS4E,EAAS5E,EAAfwF,EAAMZ,EAASY,EAC7B1G,EAAK0H,KAAOhB,EACZ1G,EAAKqM,UAAUnC,KAAKxD,GACpB1G,EAAK8F,UAAYA,EACjB9F,EAAKsM,eAAepC,KAAKpE,GACzB9F,EAAKuM,eAAiB,aAAatL,EAAC,KAAKC,EAAC,UAAUwF,EAAC,IACrD1G,EAAKkM,IAAIa,mBAEbzO,KAAKqO,UAAUpP,KAAKe,KAAKuO,eAAgB9G,EAAAA,aAAaC,UAAU,EAAG,GAAGC,MAAM3H,KAAKoJ,QAGnFuE,EAAAnN,UAAA4N,OAAA,iBACgB,QAAd/N,EAAAL,KAAKqO,iBAAS,IAAAhO,GAAAA,EAAEqO,YAAYC,UAAU,KAAKD,YACvC1O,KAAKuO,iBACPvO,KAAKuO,eAAe3H,GAAG,MAAO,MAAMA,GAAG,OAAQ,MAC/C5G,KAAKgO,eAAenB,aAOxBc,EAAAnN,UAAAoO,IAAA,SAAIxT,EAAwBuM,GAA5B,IAAAjG,EAAA1B,UAAI,IAAA5E,IAAAA,EAAA,UAAwB,IAAAuM,IAAAA,EAAA,IAC1B,IAAMyC,EAAUpK,KAAKsO,iBAAiBtL,cAAc+C,wBAChD6B,EAAY,KAChB,IAEE,GAAwB,KADxBA,EAAY5H,KAAK6O,YAAY7L,cAAc6E,WAC7BxL,MAEZ,OAEF,MAAOmD,GAGP,OAEF,IAAMsP,EAAW5F,KAAKwB,IAAIN,EAAQ/N,MAAQuL,EAAUvL,MAAO+N,EAAQ7N,OAASqL,EAAUrL,OAAQ,GAAKoL,EAE7FoH,GAAM3E,EAAQ/N,MAAQuL,EAAUvL,MAAQyS,GAAY,EACpDE,GAAM5E,EAAQ7N,OAASqL,EAAUrL,OAASuS,GAAY,EACtDG,EAAS/T,EAAwBG,MAEjCmM,EAAYC,EAAAA,aAAaC,UAAUqH,EAAKE,EAAOvT,QAAQE,YAAaoT,EAAKC,EAAOvT,QAAQC,YAAYgM,MAAMmH,GAChH9O,KAAKqO,UACFa,aACA9T,SAASA,GACT6D,KAAKe,KAAKuO,eAAe/G,UAAWA,GACpCZ,GAAG,cAAc,WAIhBlF,EAAK6M,eAAe3H,GAAG,aAAc,UAK3C+G,EAAAnN,UAAA2O,gBAAA,SAAgBtJ,GAEd,GAAKA,GAAS7F,KAAKsO,iBAAiBtL,cAAcoM,SAASvJ,GAA3D,CAIA,IAAMuE,EAAUpK,KAAKsO,iBAAiBtL,cAAc+C,wBAC9CsJ,EAAWrP,KAAKsP,wBAAwBzJ,GACxC0J,EAAetG,EAAAA,cAAcjJ,KAAKsO,iBAAiBtL,eAEnDwM,GAAWH,EAASI,QAAQ9M,EAAI0M,EAASK,YAAY/M,GAAK,EAC1DgN,GAAWN,EAASI,QAAQ7M,EAAIyM,EAASK,YAAY9M,GAAK,EAC1DmM,EAAK3E,EAAQwF,KAAOxF,EAAQ/N,MAAQ,EAAImT,EACxCR,EAAK5E,EAAQyF,IAAMzF,EAAQ7N,OAAS,EAAIoT,EAE9C/O,EAAAA,OAAOZ,KAAKsO,iBAAiBtL,eAC1BkM,aACA9T,SAAS,KACT6D,KAAKe,KAAKuO,eAAeuB,YAAaf,EAAKQ,EAAanH,EAAG4G,EAAKO,EAAanH,KAG1EuF,EAAAnN,UAAA8O,wBAAA,SAAwBzJ,GAC9B,IAAMkK,EAAUlK,EAAKgC,UACfmI,EAAUnK,EAAKoK,eACjBC,EAAUlQ,KAAKsO,iBAAiBtL,cAAcmN,iBAC9CC,EAAUpQ,KAAKsO,iBAAiBtL,cAAcmN,iBAQlD,OANAD,EAAQvN,EAAIoN,EAAQpN,EACpBuN,EAAQtN,EAAImN,EAAQnN,EACpBwN,EAAQzN,EAAIoN,EAAQpN,EAAIoN,EAAQ1T,MAChC+T,EAAQxN,EAAImN,EAAQnN,EAAImN,EAAQxT,OAGzB,CACLkT,QAHFS,EAAUA,EAAQpM,gBAAgBkM,GAIhCN,YAHFU,EAAUA,EAAQtM,gBAAgBkM,mBCpHtBK,EAAalR,GAI3B,OAAOA,GAAkC,mBAAlBA,EAAMsC,4BDtB9BY,EAAAA,UAASH,KAAA,CAAC,CACToO,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,KACjCxO,SAAU,yBACVC,SAAU,sBACVE,SAAU,2RAQVuC,KAAM,CACJ+L,iCAAkC,qDA5CpCC,EAAAA,+DAgDCC,EAAAA,UAAS5O,KAAA,CAAC,YAAa,CAAE6O,QAAQ,yBACjCD,EAAAA,UAAS5O,KAAA,CAAC,OAAQ,CAAE6O,QAAQ,0BAC5B7L,EAAAA,4BACAA,EAAAA,oBACAA,EAAAA,yBAEAwI,EAAAA,+BACAA,EAAAA,2BC2ID,SAAAsD,EAAoBpD,EAAgCnL,EAAwBD,GAAxDxC,KAAA4N,IAAAA,EAAgC5N,KAAAyC,OAAAA,EAAwBzC,KAAAwC,WAAAA,EAtCnExC,KAAAiR,gBAAmC,KAEnBjR,KAAAkR,eAAgB,EAChBlR,KAAAmR,aAAc,EAE9BnR,KAAAoR,OAAS,EACOpR,KAAAqR,YAAa,EAEnBrR,KAAAsR,mBAAqB,IAAI/F,EAAAA,aACzBvL,KAAAuR,WAAa,IAAIhG,EAAAA,aACjBvL,KAAAwR,iBAAmB,IAAIjG,EAAAA,aACvBvL,KAAAyR,YAA4D,IAAIlG,EAAAA,aAEnFvL,KAAA0R,WAA+B,CAAE1V,YAAa,GAC9CgE,KAAA2R,cAAmD,GACnD3R,KAAA4R,cAAmD,GACnD5R,KAAA6R,mBAAwF,KAExE7R,KAAA8R,WV1HT,SAAA7W,GAAQ,OAAAA,GU4HP+E,KAAA+R,cAAiC7W,EAGjC8E,KAAAgS,SAAW,IAAItF,EAAAA,QAEvB1M,KAAAiS,eAAiB,SAACC,EAAWrM,GAAyC,OAAAA,EAAK+C,MAC3E5I,KAAAmS,eAAiB,SAACD,EAAWjP,GAAsB,OAAGA,EAAKE,EAAC,IAAIF,EAAKG,GAErEpD,KAAAoS,kBAAoB,SAACvM,GAGnB,MAAO,cAFGA,EAAKlD,EAAIkD,EAAKqH,QAAQ7Q,MAAQ,GAEnB,MADXwJ,EAAKjD,EAAIiD,EAAKtJ,OAAS,EAAMsJ,EAAKlK,WAAa,GAC9B,KAG7BqE,KAAAqS,cAAgB,SAACxM,GACf,MAAO,gBAAgBA,EAAK7J,YAAW,KAIvCgE,KAAK4N,IAAI0E,gBAlDXtU,OAAAK,eACI2S,EAAAxQ,UAAA,aAAU,KADd,SACerB,GACTA,IACFa,KAAK6R,mBAAqB1S,oCAkD9B6R,EAAAxQ,UAAA6C,SAAA,WACMrD,KAAKO,aAAeP,KAAKuS,aAC3BvS,KAAKwS,kBAAkBxS,KAAKuS,cAIhCvB,EAAAxQ,UAAAgE,YAAA,SAAY7C,GACF,IAAA8Q,EAAmE9Q,EAAO8Q,UAA/DxB,EAAwDtP,EAAOsP,gBAA9CsB,EAAuC5Q,EAAO4Q,YAAP5Q,EAAO+Q,uBAEhF1U,OAAOoO,OAAOpM,KAAK+R,cAAe/R,KAAK0S,uBAAyB,IAG9DH,GACEvS,KAAKO,aAAeP,KAAKuS,aAC3BvS,KAAKwS,kBAAkBxS,KAAKuS,cAI3BE,IAAcA,EAAUE,aAAiB1B,IAAoBA,EAAgB0B,cAE5E3S,KAAKO,WAAYA,YACnBP,KAAK4S,YAAY5S,KAAKO,WAAYA,WAAY,CAC5CsS,cAAe7S,KAAKiR,gBACpBhE,SAAUjN,KAAKO,WAAYJ,eAAe2S,UAAY,KAK5D9S,KAAK4N,IAAImF,gBAGX/B,EAAAxQ,UAAA2M,gBAAA,WACEnN,KAAKgT,UACLhT,KAAK4N,IAAIa,gBACTzO,KAAKiT,aAAY,IAGnBjC,EAAAxQ,UAAA0S,sBAAA,WACMlT,KAAKO,aAAeP,KAAKmT,mBAC3BnT,KAAKoT,wBAITpC,EAAAxQ,UAAA2N,YAAA,WACEnO,KAAKgS,SAAS9S,OACdc,KAAKgS,SAASnF,WAEV7M,KAAKO,YAAoD,mBAA/BP,KAAKO,WAAWyB,YAC5ChC,KAAKO,WAAWyB,aAGdhC,KAAKmT,oBACPnT,KAAKmT,kBAAkBE,cACvBrT,KAAKmT,kBAAoB,OAO7BnC,EAAAxQ,UAAA8S,iBAAA,SAAiBC,GACfvT,KAAKoR,OAASmC,EAAOnL,EACjBpI,KAAK3C,SACP2C,KAAK3C,QAAQ+L,KAAKmK,GAEpBvT,KAAKwR,iBAAiB5F,KAAK2H,GAC3BvT,KAAK4N,IAAImF,gBAMX/B,EAAAxQ,UAAAgT,UAAA,SAAU3N,GACR7F,KAAKyR,YAAY7F,KAAK/F,IAMxBmL,EAAAxQ,UAAAwS,QAAA,iBACMhT,KAAK0R,aACmB,QAA1BrR,EAAAL,KAAKyT,6BAAqB,IAAApT,GAAAA,EAAEuO,IAAI,KAOpCoC,EAAAxQ,UAAAkT,WAAA,SAAW7N,EAAcoH,GACnBA,EAEFjN,KAAKuS,YAAY1R,SAASgF,GAG1B7F,KAAKuS,YAAY5R,OAAOkF,IAI5BmL,EAAAxQ,UAAAoS,YAAA,SAAYpR,EAAsBmS,GAChC,IAAMjC,EAAa1R,KAAK4T,eAAepS,EAAMmS,GAG7C3T,KAAK6T,cAAcnC,GAAY,GAC3B1R,KAAKqR,YACPrR,KAAK8T,YAAYpC,EAAYiC,GAE/B3T,KAAK4N,IAAIa,iBAQHuC,EAAAxQ,UAAAgS,kBAAA,SAAkBjS,GACpBP,KAAKO,YAAoD,mBAA/BP,KAAKO,WAAWyB,YAC5ChC,KAAKuS,YAAYvQ,aAGfhC,KAAKmT,oBACPnT,KAAKmT,kBAAkBE,cACvBrT,KAAKmT,kBAAoB,MAG3BnT,KAAKO,WAAaA,EAClBP,KAAKoT,wBAICpC,EAAAxQ,UAAA4S,qBAAA,WAAA,IACFW,EADErS,EAAA1B,KAEFgU,EAA8B,CAChCnB,cAAe7S,KAAKiR,iBAMtB,GAJIZ,EAAarQ,KAAKO,cACpBwT,EAAa/T,KAAKO,WAAWkB,YAG3BsS,EAUF,MAAME,MAAM,yCATZjU,KAAKmT,kBAAoBY,EAAWjS,KAAKoS,EAAAA,UAAUlU,KAAKgS,WAAWpN,WAAU,SAAApD,GAC3EwS,EAAe,CACbnB,cAAenR,EAAKuP,gBACpBhE,SAAUvL,EAAK6Q,YAAYpS,eAAe2S,UAE5CpR,EAAKkR,YAAYpR,EAAMwS,GACvBtS,EAAKkM,IAAIa,oBAOPuC,EAAAxQ,UAAAqT,cAAA,SAAcnC,EAA8ByC,GAA5C,IAAAzS,EAAA1B,UAA4C,IAAAmU,IAAAA,GAAA,GAC9CA,EACFnU,KAAKoU,iBAAiB1C,GAEtB1R,KAAK0R,WAAaA,EAEpB1R,KAAKyC,OAAOiC,SAAS5C,KAAK6C,EAAAA,KAAK,IAAIC,WAAU,WAC3ClD,EAAK2S,qBAAqBzP,gBAItBoM,EAAAxQ,UAAAoT,eAAA,SAAepS,EAAsBmS,GAArC,IAAAjS,EAAA1B,KACNA,KAAKsU,UAAU9S,GACf,IAAMkQ,EAAa6C,EAAAA,WAAW/S,EAAMmS,EAAS3T,KAAK+R,eAC5CyC,EAAM,SAACC,GACXA,EAAMC,SAAQ,SAAA7O,GACM,IAAdA,EAAK8O,MAAcjT,EAAKiQ,cAAciD,eAAe/O,EAAK+C,MAC5D5K,OAAOoO,OAAOvG,EAAMnE,EAAKiQ,cAAc9L,EAAK+C,OACrB,IAAd/C,EAAK8O,OACb9O,EAA0BgP,MAAMH,SAAQ,SAAAzR,GACnCvB,EAAKkQ,cAAcgD,eAAkB3R,EAAKE,EAAC,IAAIF,EAAKG,IACtDpF,OAAOoO,OAAOnJ,EAAMvB,EAAKkQ,cAAiB3O,EAAKE,EAAC,IAAIF,EAAKG,OAG7DoR,EAAI3O,EAAK4O,YAWf,OAPAD,EAAI9C,EAAW+C,OAEf/C,EAAWmD,MAAMH,SAAQ,SAAAzR,GACnBvB,EAAKkQ,cAAcgD,eAAkB3R,EAAKE,EAAC,IAAIF,EAAKG,IACtDpF,OAAOoO,OAAOnJ,EAAMvB,EAAKkQ,cAAiB3O,EAAKE,EAAC,IAAIF,EAAKG,OAGtDsO,GAGDV,EAAAxQ,UAAAsT,YAAA,SAAYpC,EAA8BiC,GAA1C,IAAAjS,EAAA1B,KACNA,KAAKyC,OAAOiC,SACToI,eACAhL,KAAK6C,EAAAA,KAAK,IACVC,WAAU,WACT,IAAMrE,EAA6BmB,EAAKnB,WAAYA,WACpDmB,EAAKc,WAAWQ,cAAc8R,iBAAiB,mBAAmBJ,SAAQ,SAACK,GACzE,IAAMC,EAAaD,EAAQxQ,cAAc,0BACzC,GAAIyQ,EAAY,CACd,IAAMzY,EAASyY,EAAWjP,wBAAwBxJ,OAC5CF,EAAQ2Y,EAAWjP,wBAAwB1J,MAE3C4Y,WChZWvD,GAC3B,IAAM+C,EAA+C,GACjDI,EAAuB,GACrBL,EAAM,SAAC3O,GACX4O,EAAM/U,KAAKmG,GACO,IAAdA,EAAK8O,OACPE,EAAQA,EAAMhV,OAAOgG,EAAKgP,OACzBhP,EAA0B4O,MAAMC,SAAQ,SAAAnV,GAAK,OAAAiV,EAAIjV,QAItD,OADAiV,EAAI9C,GACJ9R,EAAW6U,GDqYkBS,CAAaxD,GAAYyD,MAAK,SAAA5V,GAAK,MAAA,GAAGA,EAAEqJ,OAAWmM,EAAQ7R,MACxEkS,EAAWH,GAAcA,EAAWrM,KACpC/C,EAAOtF,EAAWkU,MAAMU,MAAK,SAAA5V,GAAK,OAAAA,EAAE2D,KAAOkS,KAE7CvP,IACFA,EAAKtJ,OAASA,EAASmF,EAAK0P,OAC5BvL,EAAKxJ,MAAQA,EAAQqF,EAAK0P,YAIhC,IAAMiE,EAAgB3T,EAAKkS,eAAerT,EAAYoT,GACtDjS,EAAKmS,cAAcwB,GAAe,OAIhCrE,EAAAxQ,UAAA4T,iBAAA,SAAiB1C,GACvB1R,KAAK0R,WAAWmD,MAAQnD,EAAWmD,MACnC7U,KAAK0R,WAAW+C,MAAMC,SAAQ,SAAC7O,EAAsC3B,GACnElG,OAAOoO,OAAOvG,EAAM6L,EAAW+C,MAAMvQ,QAIjC8M,EAAAxQ,UAAA6T,mBAAA,WAAA,IAAA3S,EAAA1B,KACN,OAAOsV,EAAAA,SAAQlU,WAAA,EAAAxB,EAAII,KAAKuV,WAAWxT,KAAI,SAAA8D,GAAQ,OAAAA,EAAKgG,qBAAkB/J,KACpE0T,EAAAA,KAAI,WACF9T,EAAKuR,iBAEPwC,EAAAA,UAAS,WACP/T,EAAKkM,IAAIa,qBAKPuC,EAAAxQ,UAAA8T,UAAA,SAAU9S,GAAV,IAAAE,EAAA1B,KACNwB,EAAKiT,MAAMC,SAAQ,SAAAnV,GACjBmC,EAAKiQ,cAAcpS,EAAE2D,IAAM3D,KAE7BiC,EAAKqT,MAAMH,SAAQ,SAAAlV,GACjBkC,EAAKkQ,cAAiBpS,EAAE2D,EAAC,IAAI3D,EAAE4D,GAAO5D,MAIlCwR,EAAAxQ,UAAAyS,YAAA,SAAYyC,gBAAA,IAAAA,IAAAA,GAAA,GACb1V,KAAK3C,SAAY2C,KAAKkR,gBAGvBwE,EACU,QAAZrV,EAAAL,KAAK3C,eAAO,IAAAgD,GAAAA,EAAEyK,KACZ9K,KAAKyT,sBAAsBnF,iBAAiBtL,cAC5ChD,KAAKyT,sBAAsB5E,YAAY7L,cACvChD,KAAKyT,sBAAsBlF,gBAGjB,QAAZpN,EAAAnB,KAAK3C,eAAO,IAAA8D,GAAAA,EAAE+F,oCA9YnB7E,EAAAA,UAASH,KAAA,CAAC,CACToO,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,KACjCxO,SAAU,WACVC,SAAU,UACVE,SAAU,uzGAuEVuC,KAAM,CACJ8Q,mBAAoB,OACpBC,4BAA6B,2DAnI/B/E,EAAAA,yBAMA5L,EAAAA,cAHAD,EAAAA,kDAwIC6Q,EAAAA,aAAY3T,KAAA,CAACiJ,kCACb2F,EAAAA,UAAS5O,KAAA,CAACyL,oBACVmD,EAAAA,UAAS5O,KAAA,CAAC2I,uBAEViL,EAAAA,aAAY5T,KAAA,CAAC6T,EAA4B,CAAEhF,QAAQ,EAAOiF,KAAMC,EAAAA,mCAUhE/Q,EAAAA,+BACAA,EAAAA,qCACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,sBAEAA,EAAAA,0BACAA,EAAAA,kCAEAwI,EAAAA,2BACAA,EAAAA,iCACAA,EAAAA,4BACAA,EAAAA,UATwBpQ,EAAA,CAAf4Y,EAAAA,4EACe5Y,EAAA,CAAf4Y,EAAAA,0EAGe5Y,EAAA,CAAf4Y,EAAAA,yEExJZ,IAAMC,EAAa,CACjBnF,EACArD,EACApL,EACA4I,EACAN,EACAuL,EACAL,KAQF,iCALCM,EAAAA,SAAQnU,KAAA,CAAC,CACRoU,aAAY1W,EAAMuW,GAClBI,QAAS,CAACC,EAAAA,aAAcC,EAAAA,aAAcC,EAAAA,cACtCC,QAAO/W,EAAMuW","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  HierarchyBaseEdgeInfo,\n  HierarchyBaseNodeInfo,\n  HierarchyGraphDef,\n  HierarchyGraphEdgeDef,\n  HierarchyGraphNodeDef,\n  HierarchyGraphNodeInfo,\n  HierarchyGraphOption\n} from '@nx-component/hierarchy-graph';\nimport { LayoutSetting } from '@nx-component/hierarchy-graph/dist/types';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nexport interface NzGraphDataDef extends HierarchyGraphDef {\n  nodes: NzGraphNodeDef[];\n  edges: NzGraphEdgeDef[];\n}\n\nexport interface NzGraphNodeDef extends HierarchyGraphNodeDef {\n  label?: string;\n}\n\nexport interface NzGraphEdgeDef extends HierarchyGraphEdgeDef {\n  label?: string;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface NzGraphOption extends HierarchyGraphOption {}\nexport declare type NzRankDirection = 'TB' | 'BT' | 'LR' | 'RL';\n\nexport interface NzGraphGroupNode extends HierarchyGraphNodeInfo {\n  nodes: Array<NzGraphNode | NzGraphGroupNode>;\n  edges: NzGraphEdge[];\n  [key: string]: NzSafeAny;\n}\n\nexport interface NzGraphNode extends HierarchyBaseNodeInfo {\n  id: NzSafeAny;\n  // TODO\n  name: NzSafeAny;\n  label?: string;\n  [key: string]: NzSafeAny;\n}\n\nexport interface NzGraphEdge extends HierarchyBaseEdgeInfo {\n  id: NzSafeAny;\n  v: NzSafeAny;\n  w: NzSafeAny;\n  label?: string;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface NzLayoutSetting extends LayoutSetting {}\n\nexport function nzTypeDefinition<T>(): (item: unknown) => T {\n  return item => item as T;\n}\n\n// tslint:disable:no-shadowed-variable\nexport type NzDeepPartial<T> = {\n  [P in keyof T]?: T[P] extends Array<infer U>\n    ? Array<NzDeepPartial<U>>\n    : T[P] extends ReadonlyArray<infer U>\n    ? ReadonlyArray<NzDeepPartial<U>>\n    : NzDeepPartial<T[P]>;\n};\n\nexport type NzGraphLayoutSetting = NzDeepPartial<NzLayoutSetting>;\nexport const NZ_GRAPH_LAYOUT_SETTING: NzLayoutSetting = {\n  animation: {\n    /** Default duration for graph animations in ms. */\n    duration: 250\n  },\n  graph: {\n    /** Graph parameter for metanode. */\n    meta: {\n      /**\n       * Dagre's nodesep param - number of pixels that\n       * separate nodes horizontally in the layout.\n       *\n       * See https://github.com/cpettitt/dagre/wiki#configuring-the-layout\n       */\n      nodeSep: 50,\n      /**\n       * Dagre's ranksep param - number of pixels\n       * between each rank in the layout.\n       *\n       * See https://github.com/cpettitt/dagre/wiki#configuring-the-layout\n       */\n      rankSep: 40,\n      /**\n       * Dagre's edgesep param - number of pixels that separate\n       * edges horizontally in the layout.\n       */\n      edgeSep: 5\n    },\n    /**\n     * Padding is used to correctly position the graph SVG inside of its parent\n     * element. The padding amounts are applied using an SVG transform of X and\n     * Y coordinates.\n     */\n    padding: { paddingTop: 10, paddingLeft: 0 }\n  },\n  subscene: {\n    meta: {\n      paddingTop: 20,\n      paddingBottom: 20,\n      paddingLeft: 20,\n      paddingRight: 20,\n      /**\n       * Used to leave room for the label on top of the highest node in\n       * the groupCore graph.\n       */\n      labelHeight: 20,\n      /** X-space between each extracted node and the groupCore graph. */\n      extractXOffset: 0,\n      /** Y-space between each extracted node. */\n      extractYOffset: 0\n    }\n  },\n  nodeSize: {\n    /** Size of meta nodes. */\n    meta: {\n      radius: 2,\n      width: 160,\n      maxLabelWidth: 0,\n      /** A scale for the node's height based on number of nodes inside */\n      // Hack - set this as an any type to avoid issues in exporting a type\n      // from an external module.\n      height: 100,\n      /** The radius of the circle denoting the expand button. */\n      expandButtonRadius: 3\n    },\n    /** Size of op nodes. */\n    op: {\n      width: 160,\n      height: 100,\n      radius: 1, // for making annotation touching ellipse\n      labelOffset: 10,\n      maxLabelWidth: 40\n    },\n    /** Size of bridge nodes. */\n    bridge: {\n      // NOTE: bridge nodes will normally be invisible, but they must\n      // take up some space so that the layout step leaves room for\n      // their edges.\n      width: 10,\n      height: 10,\n      radius: 2,\n      labelOffset: 0\n    }\n  },\n  shortcutSize: {\n    /** Size of shortcuts for op nodes */\n    op: { width: 10, height: 4 },\n    /** Size of shortcuts for meta nodes */\n    meta: { width: 12, height: 4, radius: 1 },\n    /** Size of shortcuts for series nodes */\n    series: {\n      width: 14,\n      height: 4\n    }\n  },\n  annotations: {\n    /** Maximum possible width of the bounding box for in annotations */\n    inboxWidth: 50,\n    /** Maximum possible width of the bounding box for out annotations */\n    outboxWidth: 50,\n    /** X-space between the shape and each annotation-node. */\n    xOffset: 10,\n    /** Y-space between each annotation-node. */\n    yOffset: 3,\n    /** X-space between each annotation-node and its label. */\n    labelOffset: 2,\n    /** Defines the max width for annotation label */\n    maxLabelWidth: 120\n  },\n  constant: { size: { width: 4, height: 4 } },\n  minimap: {\n    /** The maximum width/height the minimap can have. */\n    size: 150\n  }\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NzGraphDataDef } from '../interface';\nimport { NzGraphBaseSource } from './base-graph-source';\n\nexport class NzGraphData implements NzGraphBaseSource<NzGraphDataDef, string> {\n  private _data = new BehaviorSubject<NzGraphDataDef>({} as NzGraphDataDef);\n  dataSource!: NzGraphDataDef;\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<string> = new SelectionModel<string>(true);\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(nodeName: string): void {\n    this.expansionModel.toggle(nodeName);\n  }\n\n  /** Expands one single data node. */\n  expand(nodeName: string): void {\n    this.expansionModel.select(nodeName);\n  }\n\n  /** Collapses one single data node. */\n  collapse(nodeName: string): void {\n    this.expansionModel.deselect(nodeName);\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(nodeName: string): boolean {\n    return this.expansionModel.isSelected(nodeName);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  expandAll(): void {\n    this.expansionModel.select(...Object.keys(this._data.value.compound || {}));\n  }\n\n  setData(data: NzGraphDataDef): void {\n    this.expansionModel?.clear();\n    this.dataSource = data;\n    this._data.next(data);\n  }\n\n  constructor(source?: NzGraphDataDef) {\n    if (source) {\n      this.expansionModel?.clear();\n      this.dataSource = source;\n      this._data.next(source);\n    }\n  }\n\n  connect(): Observable<NzGraphDataDef> {\n    const changes = [this._data, this.expansionModel.changed];\n    return merge(...changes).pipe(map(() => this._data.value));\n  }\n\n  disconnect(): void {\n    // do nothing for now\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[nzGraphNode]',\n  exportAs: 'nzGraphNode'\n})\nexport class NzCustomGraphNodeDirective {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'svg:defs[nz-graph-defs]',\n  template: `\n    <svg:marker\n      class=\"nz-graph-edge-marker\"\n      id=\"edge-end-arrow\"\n      viewBox=\"1 0 20 20\"\n      refX=\"9\"\n      refY=\"3.5\"\n      markerWidth=\"10\"\n      markerHeight=\"10\"\n      orient=\"auto\"\n    >\n      <svg:polygon points=\"0 0, 10 3.5, 0 7\"></svg:polygon>\n    </svg:marker>\n  `\n})\nexport class NzGraphDefsComponent {\n  constructor() {}\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive, ElementRef, Input, NgZone, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { curveBasis, line } from 'd3-shape';\nimport { take } from 'rxjs/operators';\nimport { NzGraphEdge } from './interface';\n\n@Directive({\n  selector: 'svg:path[nz-graph-edge]',\n  host: {\n    '[class.nz-graph-edge-line]': 'true',\n    '[id]': 'id'\n  }\n})\nexport class NzGraphEdgeDirective implements OnInit, OnChanges {\n  @Input() edge!: NzGraphEdge;\n\n  public get id(): string {\n    return this.edge?.id || `${this.edge.v}--${this.edge.w}`;\n  }\n\n  private readonly el!: SVGPathElement;\n  private readonly line = line<{ x: number; y: number }>()\n    .x(d => d.x)\n    .y(d => d.y)\n    .curve(curveBasis);\n\n  constructor(private elementRef: ElementRef<SVGPathElement>, private ngZone: NgZone) {\n    this.el = this.elementRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.setElementData();\n  }\n\n  setLine(): void {\n    const adjoiningPath = this.getAdjoiningEdgeElement();\n\n    if (adjoiningPath) {\n      const adjoiningPoint = adjoiningPath\n        .getPointAtLength(this.edge.inbound ? adjoiningPath.getTotalLength() : 0)\n        .matrixTransform(adjoiningPath.getCTM()!)\n        .matrixTransform(this.el.getCTM()!.inverse());\n      const points = [...this.edge.points];\n      const index = this.edge.inbound ? 0 : points.length - 1;\n      points[index].x = adjoiningPoint.x;\n      points[index].y = adjoiningPoint.y;\n      this.setPath(this.line(points)!);\n    } else {\n      this.setPath(this.line(this.edge.points)!);\n    }\n  }\n\n  setPath(d: string): void {\n    this.el.setAttribute('d', d);\n  }\n\n  setElementData(): void {\n    this.el.setAttribute('data-edge', `${this.edge.v}--${this.edge.w}`);\n    this.el.setAttribute('data-v', `${this.edge.v}`);\n    this.el.setAttribute('data-w', `${this.edge.w}`);\n  }\n\n  getAdjoiningEdgeElement(): SVGPathElement | null {\n    const adjoiningEdge = this.edge.adjoiningEdge;\n    if (adjoiningEdge) {\n      return document.querySelector(`path[data-edge=\"${adjoiningEdge.v}--${adjoiningEdge.w}\"]`) as SVGPathElement;\n    } else {\n      return null;\n    }\n  }\n\n  ngOnChanges(_changes: SimpleChanges): void {\n    this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this.setLine();\n    });\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { drag } from 'd3-drag';\nimport { pointer, select } from 'd3-selection';\nimport { ZoomBehavior, zoomIdentity, ZoomTransform } from 'd3-zoom';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nconst FRAC_VIEWPOINT_AREA = 0.8;\n\nexport class Minimap {\n  private minimap: HTMLElement;\n  private canvas: HTMLCanvasElement;\n  private canvasRect: ClientRect;\n  private canvasBuffer: HTMLCanvasElement;\n  private minimapSvg: SVGSVGElement;\n  private viewpoint: SVGRectElement;\n  private scaleMinimap!: number;\n  private scaleMain!: number;\n  private maxWandH: number;\n  private translate!: [number, number];\n  private viewpointCoord: { x: number; y: number };\n  private minimapSize!: { width: number; height: number };\n  private labelPadding: number;\n\n  private svg: SVGSVGElement;\n  private zoomG: SVGGElement;\n  private mainZoom: ZoomBehavior<NzSafeAny, NzSafeAny>;\n\n  constructor(\n    svg: SVGSVGElement,\n    zoomG: SVGGElement,\n    mainZoom: ZoomBehavior<NzSafeAny, NzSafeAny>,\n    minimap: HTMLElement,\n    maxWandH: number,\n    labelPadding: number\n  ) {\n    this.svg = svg;\n    this.labelPadding = labelPadding;\n    this.zoomG = zoomG;\n    this.mainZoom = mainZoom;\n    this.maxWandH = maxWandH;\n    const minimapElement = select(minimap);\n    const minimapSvgElement = minimapElement.select('svg');\n    const viewpointElement = minimapSvgElement.select('rect');\n    this.canvas = minimapElement.select('canvas.viewport').node() as HTMLCanvasElement;\n    this.canvasRect = this.canvas.getBoundingClientRect();\n\n    const handleEvent = (event: NzSafeAny): void => {\n      const minimapOffset = this.minimapOffset();\n      const width = Number(viewpointElement.attr('width'));\n      const height = Number(viewpointElement.attr('height'));\n      const clickCoords = pointer(event, minimapSvgElement.node() as NzSafeAny);\n      this.viewpointCoord.x = clickCoords[0] - width / 2 - minimapOffset.x;\n      this.viewpointCoord.y = clickCoords[1] - height / 2 - minimapOffset.y;\n      this.updateViewpoint();\n    };\n    this.viewpointCoord = { x: 0, y: 0 };\n    const dragEvent = drag().subject(Object).on('drag', handleEvent);\n    viewpointElement.datum(this.viewpointCoord as NzSafeAny).call(dragEvent as NzSafeAny);\n\n    // Make the minimap clickable.\n    minimapSvgElement.on('click', event => {\n      if ((event as Event).defaultPrevented) {\n        // This click was part of a drag event, so suppress it.\n        return;\n      }\n      handleEvent(event);\n    });\n    this.viewpoint = viewpointElement.node() as SVGRectElement;\n    this.minimapSvg = minimapSvgElement.node() as SVGSVGElement;\n    this.minimap = minimap;\n    this.canvasBuffer = minimapElement.select('canvas.buffer').node() as HTMLCanvasElement;\n    this.update();\n  }\n\n  private minimapOffset(): { x: number; y: number } {\n    return {\n      x: (this.canvasRect.width - this.minimapSize.width) / 2,\n      y: (this.canvasRect.height - this.minimapSize.height) / 2\n    };\n  }\n\n  private updateViewpoint(): void {\n    // Update the coordinates of the viewpoint rectangle.\n    select(this.viewpoint).attr('x', this.viewpointCoord.x).attr('y', this.viewpointCoord.y);\n    // Update the translation vector of the main svg to reflect the\n    // new viewpoint.\n    const mainX = (-this.viewpointCoord.x * this.scaleMain) / this.scaleMinimap;\n    const mainY = (-this.viewpointCoord.y * this.scaleMain) / this.scaleMinimap;\n    select(this.svg).call(this.mainZoom.transform, zoomIdentity.translate(mainX, mainY).scale(this.scaleMain));\n  }\n\n  update(): void {\n    let sceneSize = null;\n    try {\n      // Get the size of the entire scene.\n      sceneSize = this.zoomG.getBBox();\n      if (sceneSize.width === 0) {\n        // There is no scene anymore. We have been detached from the dom.\n        return;\n      }\n    } catch (e) {\n      // Firefox produced NS_ERROR_FAILURE if we have been\n      // detached from the dom.\n      return;\n    }\n\n    const svgSelection = select(this.svg);\n    // Read all the style rules in the document and embed them into the svg.\n    // The svg needs to be self contained, i.e. all the style rules need to be\n    // embedded so the canvas output matches the origin.\n    let stylesText = '';\n\n    for (const k of new Array(document.styleSheets.length).keys()) {\n      try {\n        const cssRules = (document.styleSheets[k] as NzSafeAny).cssRules || (document.styleSheets[k] as NzSafeAny).rules;\n        if (cssRules == null) {\n          continue;\n        }\n        for (const i of new Array(cssRules.length).keys()) {\n          // Remove tf-* selectors from the styles.\n          stylesText += cssRules[i].cssText.replace(/ ?tf-[\\w-]+ ?/g, '') + '\\n';\n        }\n      } catch (e) {\n        if (e.name !== 'SecurityError') {\n          throw e;\n        }\n      }\n    }\n\n    // Temporarily add the css rules to the main svg.\n    const svgStyle = svgSelection.append('style');\n    svgStyle.text(stylesText);\n\n    // Temporarily remove the zoom/pan transform from the main svg since we\n    // want the minimap to show a zoomed-out and centered view.\n    const zoomGSelection = select(this.zoomG);\n    const zoomTransform = zoomGSelection.attr('transform');\n    zoomGSelection.attr('transform', null);\n\n    // Since we add padding, account for that here.\n    sceneSize.height += this.labelPadding * 2;\n    sceneSize.width += this.labelPadding * 2;\n\n    // Temporarily assign an explicit width/height to the main svg, since\n    // it doesn't have one (uses flex-box), but we need it for the canvas\n    // to work.\n    svgSelection.attr('width', sceneSize.width).attr('height', sceneSize.height);\n\n    // Since the content inside the svg changed (e.g. a node was expanded),\n    // the aspect ratio have also changed. Thus, we need to update the scale\n    // factor of the minimap. The scale factor is determined such that both\n    // the width and height of the minimap are <= maximum specified w/h.\n    this.scaleMinimap = this.maxWandH / Math.max(sceneSize.width, sceneSize.height);\n    this.minimapSize = {\n      width: sceneSize.width * this.scaleMinimap,\n      height: sceneSize.height * this.scaleMinimap\n    };\n\n    const minimapOffset = this.minimapOffset();\n\n    // Update the size of the minimap's svg, the buffer canvas and the\n    // viewpoint rect.\n    select(this.minimapSvg).attr(this.minimapSize as NzSafeAny);\n    select(this.canvasBuffer).attr(this.minimapSize as NzSafeAny);\n\n    if (this.translate != null && this.zoom != null) {\n      // Update the viewpoint rectangle shape since the aspect ratio of the\n      // map has changed.\n      requestAnimationFrame(() => this.zoom());\n    }\n\n    // Serialize the main svg to a string which will be used as the rendering\n    // content for the canvas.\n    const svgXml = new XMLSerializer().serializeToString(this.svg);\n\n    // Now that the svg is serialized for rendering, remove the temporarily\n    // assigned styles, explicit width and height and bring back the pan/zoom\n    // transform.\n    svgStyle.remove();\n    svgSelection.attr('width', '100%').attr('height', '100%');\n\n    zoomGSelection.attr('transform', zoomTransform);\n\n    const image = new Image();\n    image.onload = () => {\n      // Draw the svg content onto the buffer canvas.\n      const context = this.canvasBuffer.getContext('2d');\n      context!.clearRect(0, 0, this.canvasBuffer.width, this.canvasBuffer.height);\n\n      context!.drawImage(image, minimapOffset.x, minimapOffset.y, this.minimapSize.width, this.minimapSize.height);\n      requestAnimationFrame(() => {\n        // Hide the old canvas and show the new buffer canvas.\n        select(this.canvasBuffer).style('display', 'block');\n        select(this.canvas).style('display', 'none');\n        // Swap the two canvases.\n        [this.canvas, this.canvasBuffer] = [this.canvasBuffer, this.canvas];\n      });\n    };\n    image.src = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgXml);\n  }\n\n  /**\n   * Handles changes in zooming/panning. Should be called from the main svg\n   * to notify that a zoom/pan was performed and this minimap will update it's\n   * viewpoint rectangle.\n   * @param transform\n   */\n  zoom(transform?: ZoomTransform): void {\n    if (this.scaleMinimap == null) {\n      // Scene is not ready yet.\n      return;\n    }\n    // Update the new translate and scale params, only if specified.\n    if (transform) {\n      this.translate = [transform.x, transform.y];\n      this.scaleMain = transform.k;\n    }\n\n    // Update the location of the viewpoint rectangle.\n    const svgRect = this.svg.getBoundingClientRect();\n    const minimapOffset = this.minimapOffset();\n    const viewpointSelection = select(this.viewpoint);\n    this.viewpointCoord.x = (-this.translate[0] * this.scaleMinimap) / this.scaleMain;\n    this.viewpointCoord.y = (-this.translate[1] * this.scaleMinimap) / this.scaleMain;\n    const viewpointWidth = (svgRect.width * this.scaleMinimap) / this.scaleMain;\n    const viewpointHeight = (svgRect.height * this.scaleMinimap) / this.scaleMain;\n    viewpointSelection\n      .attr('x', this.viewpointCoord.x + minimapOffset.x)\n      .attr('y', this.viewpointCoord.y + minimapOffset.y)\n      .attr('width', viewpointWidth)\n      .attr('height', viewpointHeight);\n    // Show/hide the minimap depending on the viewpoint area as fraction of the\n    // whole minimap.\n    const mapWidth = this.minimapSize.width;\n    const mapHeight = this.minimapSize.height;\n    const x = this.viewpointCoord.x;\n    const y = this.viewpointCoord.y;\n    const w = Math.min(Math.max(0, x + viewpointWidth), mapWidth) - Math.min(Math.max(0, x), mapWidth);\n    const h = Math.min(Math.max(0, y + viewpointHeight), mapHeight) - Math.min(Math.max(0, y), mapHeight);\n    const fracIntersect = (w * h) / (mapWidth * mapHeight);\n    if (fracIntersect < FRAC_VIEWPOINT_AREA) {\n      this.minimap.classList.remove('hidden');\n    } else {\n      this.minimap.classList.add('hidden');\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Component, ElementRef, OnInit } from '@angular/core';\nimport { ZoomBehavior, ZoomTransform } from 'd3-zoom';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { Minimap } from './core/minimap';\nimport { NZ_GRAPH_LAYOUT_SETTING } from './interface';\n\n@Component({\n  selector: 'nz-graph-minimap',\n  template: `\n    <svg>\n      <defs>\n        <filter id=\"minimapDropShadow\" x=\"-20%\" y=\"-20%\" width=\"150%\" height=\"150%\">\n          <feOffset result=\"offOut\" in=\"SourceGraphic\" dx=\"1\" dy=\"1\"></feOffset>\n          <feColorMatrix\n            result=\"matrixOut\"\n            in=\"offOut\"\n            type=\"matrix\"\n            values=\"0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.5 0\"\n          ></feColorMatrix>\n          <feGaussianBlur result=\"blurOut\" in=\"matrixOut\" stdDeviation=\"2\"></feGaussianBlur>\n          <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\"></feBlend>\n        </filter>\n      </defs>\n      <rect></rect>\n    </svg>\n    <canvas class=\"viewport\"></canvas>\n    <!-- Additional canvas to use as buffer to avoid flickering between updates -->\n    <canvas class=\"buffer\"></canvas>\n  `,\n  host: {\n    '[class.nz-graph-minimap]': 'true'\n  }\n})\nexport class NzGraphMinimapComponent implements OnInit {\n  minimap?: Minimap;\n  constructor(private elementRef: ElementRef<HTMLElement>) {}\n\n  ngOnInit(): void {}\n\n  init(svgEle: SVGSVGElement, zoomEle: SVGGElement, zoomBehavior: ZoomBehavior<NzSafeAny, NzSafeAny>): void {\n    this.minimap = new Minimap(\n      svgEle,\n      zoomEle,\n      zoomBehavior,\n      this.elementRef.nativeElement,\n      NZ_GRAPH_LAYOUT_SETTING.minimap.size,\n      NZ_GRAPH_LAYOUT_SETTING.subscene.meta.labelHeight\n    );\n  }\n\n  zoom(transform: ZoomTransform): void {\n    if (this.minimap) {\n      this.minimap.zoom(transform);\n    }\n  }\n\n  update(): void {\n    if (this.minimap) {\n      this.minimap.update();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, group, query, style } from '@angular/animations';\nimport { AfterViewInit, Directive, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { NzGraphGroupNode, NzGraphNode } from './interface';\n\ninterface Info {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\n@Directive({\n  selector: 'svg:g[nz-graph-node]',\n  host: {\n    '[id]': 'node.id || node.name',\n    '[class.nz-graph-node-expanded]': 'node.expanded',\n    '[class.nz-graph-group-node]': 'node.type===0',\n    '[class.nz-graph-base-node]': 'node.type===1',\n    '(click)': 'onTriggerClick($event)'\n  }\n})\nexport class NzGraphNodeDirective implements AfterViewInit {\n  @Input() node!: NzGraphNode | NzGraphGroupNode;\n  @Output() readonly nodeClick: EventEmitter<NzGraphNode | NzGraphGroupNode> = new EventEmitter();\n\n  onTriggerClick(event: MouseEvent): void {\n    event.preventDefault();\n    this.nodeClick.emit(this.node);\n  }\n\n  animationInfo: Info | null = null;\n\n  private animationPlayer: AnimationPlayer | null = null;\n\n  constructor(private el: ElementRef, private builder: AnimationBuilder, private renderer2: Renderer2) {}\n\n  makeAnimation(isFirstChange: boolean = false): Observable<void> {\n    if (this.animationPlayer) {\n      this.animationPlayer.destroy();\n    }\n    let animationFactory: AnimationFactory;\n    const cur = this.getAnimationInfo();\n    const pre = { ...this.animationInfo } as Info;\n\n    if (isFirstChange) {\n      animationFactory = this.builder.build([\n        style({ transform: `translate(${cur.x}px, ${cur.y}px)` }),\n        query('.nz-graph-node-rect', [\n          style({\n            width: `${cur.width}px`,\n            height: `${cur.height}px`\n          })\n        ])\n      ]);\n    } else {\n      animationFactory = this.builder.build([\n        style({ transform: `translate(${pre!.x}px, ${pre!.y}px)` }),\n        query('.nz-graph-node-rect', [\n          style({\n            width: `${pre!.width}px`,\n            height: `${pre!.height}px`\n          })\n        ]),\n        group([\n          query('.nz-graph-node-rect', [\n            animate(\n              '200ms ease-out',\n              style({\n                width: `${cur.width}px`,\n                height: `${cur.height}px`\n              })\n            )\n          ]),\n          animate('200ms ease-out', style({ transform: `translate(${cur.x}px, ${cur.y}px)` }))\n        ])\n      ]);\n    }\n    const done$ = new Subject<void>();\n    this.animationInfo = cur;\n    this.animationPlayer = animationFactory.create(this.el.nativeElement);\n    this.animationPlayer.play();\n    this.animationPlayer.onDone(() => {\n      // Need this for canvas for now.\n      this.renderer2.setAttribute(this.el.nativeElement, 'transform', `translate(${cur.x}, ${cur.y})`);\n      done$.next();\n      done$.complete();\n    });\n    return done$.asObservable();\n  }\n\n  getAnimationInfo(): Info {\n    const { x, y } = this.nodeTransform();\n    return {\n      width: this.node.width,\n      height: this.node.height,\n      x,\n      y\n    };\n  }\n\n  nodeTransform(): { x: number; y: number } {\n    const x = this.computeCXPositionOfNodeShape() - this.node.width / 2;\n    const y = this.node.y - this.node.height / 2;\n    return { x, y };\n  }\n\n  computeCXPositionOfNodeShape(): number {\n    if ((this.node as NzGraphGroupNode).expanded) {\n      return this.node.x;\n    }\n    return this.node.x - this.node.width / 2 + this.node.coreBox.width / 2;\n  }\n\n  ngAfterViewInit(): void {\n    this.makeAnimation(true);\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { select, Selection } from 'd3-selection';\n// Need to import for select\n// @ts-ignore\nimport { interrupt, transition } from 'd3-transition';\nimport { zoom, ZoomBehavior, zoomIdentity, zoomTransform } from 'd3-zoom';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NZ_GRAPH_LAYOUT_SETTING } from './interface';\n\nexport interface NzZoomTransform {\n  x: number;\n  y: number;\n  k: number;\n}\n\nexport interface RelativePositionInfo {\n  topLeft: { x: number; y: number };\n  bottomRight: { x: number; y: number };\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-graph-svg-container',\n  exportAs: 'nzGraphSvgContainer',\n  template: `\n    <svg #container width=\"100%\" height=\"100%\">\n      <rect width=\"100%\" height=\"100%\" fill=\"transparent\" class=\"nz-graph-background\"></rect>\n      <g #zoom [attr.transform]=\"transformStyle\" class=\"nz-graph-zoom\">\n        <ng-content></ng-content>\n      </g>\n    </svg>\n  `,\n  host: {\n    '[class.nz-graph-svg-container]': 'true'\n  }\n})\nexport class NzGraphSvgContainerComponent implements OnInit, OnDestroy {\n  @ViewChild('container', { static: true }) containerElement!: ElementRef<SVGSVGElement>;\n  @ViewChild('zoom', { static: true }) zoomElement!: ElementRef<SVGAElement>;\n  @Input() maxZoomLevel = 10;\n  @Input() minZoomLevel = 0.1;\n  @Input() zoom = 1;\n\n  @Output() readonly zoomEvent: EventEmitter<number> = new EventEmitter();\n  @Output() readonly transformEvent: EventEmitter<NzZoomTransform> = new EventEmitter();\n  transform: NzZoomTransform = { x: 0, y: 0, k: 1 };\n  transformStyle = '';\n  svgSelect!: Selection<NzSafeAny, NzSafeAny, NzSafeAny, NzSafeAny>;\n  zoomController!: ZoomBehavior<NzSafeAny, NzSafeAny>;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.bind();\n  }\n\n  ngOnDestroy(): void {\n    this.unbind();\n  }\n\n  bind(): void {\n    this.svgSelect = select(this.containerElement.nativeElement);\n    this.zoomController = zoom()\n      .scaleExtent([this.minZoomLevel, this.maxZoomLevel])\n      .on('zoom', ({ transform }: NzSafeAny) => {\n        const { x, y, k } = transform;\n        this.zoom = k;\n        this.zoomEvent.emit(k);\n        this.transform = transform;\n        this.transformEvent.emit(transform);\n        this.transformStyle = `translate(${x} ,${y})scale(${k})`;\n        this.cdr.detectChanges();\n      });\n    this.svgSelect.call(this.zoomController, zoomIdentity.translate(0, 0).scale(this.zoom));\n  }\n\n  unbind(): void {\n    this.svgSelect?.interrupt().selectAll('*').interrupt();\n    if (this.zoomController) {\n      this.zoomController.on('end', null).on('zoom', null);\n      this.transformEvent.complete();\n    }\n  }\n\n  /**\n   * Zoom to fit\n   */\n  fit(duration: number = 500, scale: number = 0.9): void {\n    const svgRect = this.containerElement.nativeElement.getBoundingClientRect();\n    let sceneSize = null;\n    try {\n      sceneSize = this.zoomElement.nativeElement.getBBox();\n      if (sceneSize.width === 0) {\n        // There is no scene anymore. We have been detached from the dom.\n        return;\n      }\n    } catch (e) {\n      // Firefox produced NS_ERROR_FAILURE if we have been\n      // detached from the dom.\n      return;\n    }\n    const fitScale = Math.min(svgRect.width / sceneSize.width, svgRect.height / sceneSize.height, 2) * scale;\n\n    const dx = (svgRect.width - sceneSize.width * fitScale) / 2;\n    const dy = (svgRect.height - sceneSize.height * fitScale) / 2;\n    const params = NZ_GRAPH_LAYOUT_SETTING.graph;\n\n    const transform = zoomIdentity.translate(dx + params.padding.paddingLeft, dy + params.padding.paddingTop).scale(fitScale);\n    this.svgSelect\n      .transition()\n      .duration(duration)\n      .call(this.zoomController.transform, transform)\n      .on('end.fitted', () => {\n        // Remove the listener for the zoomend event,\n        // so we don't get called at the end of regular zoom events,\n        // just those that fit the graph to screen.\n        this.zoomController.on('end.fitted', null);\n      });\n  }\n\n  // Move node to center\n  setNodeToCenter(node: SVGGElement): void {\n    // Make sure this node is under SVG container\n    if (!node || !this.containerElement.nativeElement.contains(node)) {\n      return;\n    }\n\n    const svgRect = this.containerElement.nativeElement.getBoundingClientRect();\n    const position = this.getRelativePositionInfo(node);\n    const svgTransform = zoomTransform(this.containerElement.nativeElement);\n\n    const centerX = (position.topLeft.x + position.bottomRight.x) / 2;\n    const centerY = (position.topLeft.y + position.bottomRight.y) / 2;\n    const dx = svgRect.left + svgRect.width / 2 - centerX;\n    const dy = svgRect.top + svgRect.height / 2 - centerY;\n\n    select(this.containerElement.nativeElement)\n      .transition()\n      .duration(250)\n      .call(this.zoomController.translateBy, dx / svgTransform.k, dy / svgTransform.k);\n  }\n\n  private getRelativePositionInfo(node: SVGGElement): RelativePositionInfo {\n    const nodeBox = node.getBBox();\n    const nodeCtm = node.getScreenCTM();\n    let pointTL = this.containerElement.nativeElement.createSVGPoint();\n    let pointBR = this.containerElement.nativeElement.createSVGPoint();\n\n    pointTL.x = nodeBox.x;\n    pointTL.y = nodeBox.y;\n    pointBR.x = nodeBox.x + nodeBox.width;\n    pointBR.y = nodeBox.y + nodeBox.height;\n    pointTL = pointTL.matrixTransform(nodeCtm!);\n    pointBR = pointBR.matrixTransform(nodeCtm!);\n    return {\n      topLeft: pointTL,\n      bottomRight: pointBR\n    };\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport { buildGraph } from '@nx-component/hierarchy-graph';\nimport { ZoomTransform } from 'd3-zoom';\nimport { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { forkJoin, Observable, Subject, Subscription } from 'rxjs';\nimport { finalize, take, takeUntil, tap } from 'rxjs/operators';\nimport { NzCustomGraphNodeDirective } from './custom-graph-node.directive';\nimport { NzGraphData } from './data-source/graph-data-source';\nimport { NzGraphMinimapComponent } from './graph-minimap.component';\nimport { NzGraphNodeDirective } from './graph-node.directive';\nimport { NzGraphSvgContainerComponent, NzZoomTransform } from './graph-svg-container.component';\nimport {\n  NzGraphDataDef,\n  NzGraphEdge,\n  NzGraphEdgeDef,\n  NzGraphGroupNode,\n  NzGraphLayoutSetting,\n  NzGraphNode,\n  NzGraphNodeDef,\n  NzGraphOption,\n  NzLayoutSetting,\n  NzRankDirection,\n  nzTypeDefinition,\n  NZ_GRAPH_LAYOUT_SETTING\n} from './interface';\nimport { flattenNodes } from './utils';\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: NzSafeAny): value is NzGraphData {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-graph',\n  exportAs: 'nzGraph',\n  template: `\n    <ng-content></ng-content>\n    <nz-graph-svg-container (transformEvent)=\"triggerTransform($event)\">\n      <svg:defs nz-graph-defs></svg:defs>\n      <ng-container [ngTemplateOutlet]=\"groupTemplate\" [ngTemplateOutletContext]=\"{ renderInfo: renderInfo, type: 'root' }\"></ng-container>\n    </nz-graph-svg-container>\n\n    <nz-graph-minimap *ngIf=\"nzShowMinimap\"></nz-graph-minimap>\n\n    <ng-template #groupTemplate let-renderInfo=\"renderInfo\" let-type=\"type\">\n      <svg:g [attr.transform]=\"type === 'sub' ? subGraphTransform(renderInfo) : null\">\n        <svg:g class=\"core\" [attr.transform]=\"coreTransform(renderInfo)\">\n          <svg:g class=\"nz-graph-edges\">\n            <svg:g class=\"nz-graph-edge\" *ngFor=\"let edge of renderInfo.edges; let index = index; trackBy: edgeTrackByFun\">\n              <svg:path\n                class=\"nz-graph-edge-line\"\n                nz-graph-edge\n                [attr.marker-end]=\"nzShowArrow ? 'url(#edge-end-arrow)' : null\"\n                [edge]=\"edge\"\n              ></svg:path>\n              <svg:text class=\"nz-graph-edge-text\" text-anchor=\"middle\" dy=\"20\" *ngIf=\"edge.label\">\n                <textPath [attr.href]=\"'#' + edge.v + '--' + edge.w\" startOffset=\"50%\">{{ edge.label }}</textPath>\n              </svg:text>\n            </svg:g>\n          </svg:g>\n\n          <svg:g class=\"nz-graph-nodes\">\n            <svg:g\n              class=\"nz-graph-node\"\n              [class.nz-graph-custom-node]=\"!!customNodeTemplate\"\n              [style.display]=\"node.type === 2 ? 'none' : null\"\n              *ngFor=\"let node of typedNodes(renderInfo.nodes); trackBy: nodeTrackByFun\"\n            >\n              <svg:g nz-graph-node [node]=\"node\" (nodeClick)=\"clickNode($event)\">\n                <svg:rect class=\"nz-graph-node-rect\"></svg:rect>\n                <foreignObject x=\"0\" y=\"0\" [attr.width]=\"node.width\" [attr.height]=\"node.height\">\n                  <xhtml:div class=\"nz-graph-node-wrapper\">\n                    <ng-container\n                      *ngIf=\"customNodeTemplate\"\n                      [ngTemplateOutlet]=\"customNodeTemplate\"\n                      [ngTemplateOutletContext]=\"{ $implicit: node, group: node.type === 0 }\"\n                    ></ng-container>\n                    <div class=\"node-content\" *ngIf=\"!customNodeTemplate\">\n                      <div class=\"title\">\n                        {{ node.name }}\n                        <i\n                          class=\"action-icon\"\n                          *ngIf=\"node.type === 0\"\n                          nz-icon\n                          [nzType]=\"node.expanded ? 'minus' : 'plus'\"\n                          nzTheme=\"outline\"\n                          (click)=\"toggleNode(node.name, node.expanded)\"\n                        ></i>\n                      </div>\n                      <div class=\"label\" *ngIf=\"!node.expanded\">{{ node.label }}</div>\n                    </div>\n                  </xhtml:div>\n                </foreignObject>\n              </svg:g>\n\n              <ng-container\n                *ngIf=\"node.expanded\"\n                [ngTemplateOutlet]=\"groupTemplate\"\n                [ngTemplateOutletContext]=\"{ renderInfo: node, type: 'sub' }\"\n              ></ng-container>\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ng-template>\n  `,\n  host: {\n    '[class.nz-graph]': 'true',\n    '[class.nz-graph-auto-fit]': 'nzAutoSize'\n  }\n})\nexport class NzGraphComponent implements OnInit, OnChanges, AfterViewInit, AfterContentChecked, OnDestroy {\n  static ngAcceptInputType_nzShowMinimap: BooleanInput;\n  static ngAcceptInputType_nzAutoSize: BooleanInput;\n  static ngAcceptInputType_nzShowArrow: BooleanInput;\n\n  @ViewChildren(NzGraphNodeDirective) graphNodes!: QueryList<NzGraphNodeDirective>;\n  @ViewChild(NzGraphSvgContainerComponent) svgContainerComponent!: NzGraphSvgContainerComponent;\n  @ViewChild(NzGraphMinimapComponent) minimap: NzGraphMinimapComponent | undefined;\n\n  @ContentChild(NzCustomGraphNodeDirective, { static: false, read: TemplateRef })\n  set customNode(value: TemplateRef<{ $implicit: NzGraphNode | NzGraphGroupNode }>) {\n    if (value) {\n      this.customNodeTemplate = value;\n    }\n  }\n  /**\n   * Provides a stream containing the latest data array to render.\n   * Data source can be an observable of NzGraphData, or a NzGraphData to render.\n   */\n  @Input() nzGraphData!: NzGraphData;\n  @Input() nzRankDirection: NzRankDirection = 'LR';\n  @Input() nzGraphLayoutSettings?: NzGraphLayoutSetting;\n  @Input() @InputBoolean() nzShowMinimap = false;\n  @Input() @InputBoolean() nzShowArrow = false;\n\n  @Input() nzZoom = 1;\n  @Input() @InputBoolean() nzAutoSize = false;\n\n  @Output() readonly nzGraphInitialized = new EventEmitter<void>();\n  @Output() readonly nzZoomInit = new EventEmitter<void>();\n  @Output() readonly nzTransformEvent = new EventEmitter<NzZoomTransform>();\n  @Output() readonly nzNodeClick: EventEmitter<NzGraphNode | NzGraphGroupNode> = new EventEmitter();\n\n  renderInfo: NzGraphGroupNode = { labelHeight: 0 } as NzGraphGroupNode;\n  mapOfNodeAttr: { [key: string]: NzGraphNodeDef } = {};\n  mapOfEdgeAttr: { [key: string]: NzGraphEdgeDef } = {};\n  customNodeTemplate: TemplateRef<{ $implicit: NzGraphGroupNode | NzGraphNode }> | null = null;\n\n  public readonly typedNodes = nzTypeDefinition<Array<NzGraphNode | NzGraphGroupNode>>();\n  private dataSource?: NzGraphData;\n  private layoutSetting: NzLayoutSetting = NZ_GRAPH_LAYOUT_SETTING;\n  /** Data subscription */\n  private _dataSubscription?: Subscription | null;\n  private destroy$ = new Subject<void>();\n\n  nodeTrackByFun = (_: number, node: NzGraphNode | NzGraphGroupNode) => node.name;\n  edgeTrackByFun = (_: number, edge: NzGraphEdge) => `${edge.v}-${edge.w}`;\n\n  subGraphTransform = (node: NzGraphGroupNode) => {\n    const x = node.x - node.coreBox.width / 2.0;\n    const y = node.y - node.height / 2.0 + node.paddingTop / 2.0;\n    return `translate(${x}, ${y})`;\n  };\n\n  coreTransform = (node: NzGraphGroupNode) => {\n    return `translate(0, ${node.labelHeight})`;\n  };\n\n  constructor(private cdr: ChangeDetectorRef, private ngZone: NgZone, private elementRef: ElementRef) {\n    this.cdr.detach();\n  }\n\n  ngOnInit(): void {\n    if (this.dataSource !== this.nzGraphData) {\n      this._switchDataSource(this.nzGraphData);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzAutoFit, nzRankDirection, nzGraphData, nzGraphLayoutSettings } = changes;\n    if (nzGraphLayoutSettings) {\n      Object.assign(this.layoutSetting, this.nzGraphLayoutSettings || {});\n    }\n\n    if (nzGraphData) {\n      if (this.dataSource !== this.nzGraphData) {\n        this._switchDataSource(this.nzGraphData);\n      }\n    }\n\n    if ((nzAutoFit && !nzAutoFit.firstChange) || (nzRankDirection && !nzRankDirection.firstChange)) {\n      // Render graph\n      if (this.dataSource!.dataSource) {\n        this.renderGraph(this.dataSource!.dataSource, {\n          rankDirection: this.nzRankDirection,\n          expanded: this.dataSource!.expansionModel.selected || []\n        });\n      }\n    }\n\n    this.cdr.markForCheck();\n  }\n\n  ngAfterViewInit(): void {\n    this.autoFit();\n    this.cdr.detectChanges();\n    this.drawMinimap(true);\n  }\n\n  ngAfterContentChecked(): void {\n    if (this.dataSource && !this._dataSubscription) {\n      this.observeRenderChanges();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n\n    if (this.dataSource && typeof this.dataSource.disconnect === 'function') {\n      this.dataSource.disconnect();\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n\n  /**\n   * Transform event\n   */\n  triggerTransform($event: { x: number; y: number; k: number }): void {\n    this.nzZoom = $event.k;\n    if (this.minimap) {\n      this.minimap.zoom($event as ZoomTransform);\n    }\n    this.nzTransformEvent.emit($event);\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * Emit event\n   */\n  clickNode(node: NzGraphNode | NzGraphGroupNode): void {\n    this.nzNodeClick.emit(node);\n  }\n\n  /**\n   * Move graph to center\n   */\n  autoFit(): void {\n    if (this.renderInfo) {\n      this.svgContainerComponent?.fit(0);\n    }\n  }\n\n  /**\n   * Refactor\n   */\n  toggleNode(node: string, expanded: boolean): void {\n    if (expanded) {\n      // collapse it\n      this.nzGraphData.collapse(node);\n    } else {\n      // expand it\n      this.nzGraphData.expand(node);\n    }\n  }\n\n  renderGraph(data: NzGraphDataDef, options: NzGraphOption): void {\n    const renderInfo = this.buildGraphInfo(data, options);\n    // TODO\n    // Need better performance\n    this.setRenderInfo(renderInfo, false);\n    if (this.nzAutoSize) {\n      this.resizeNodes(renderInfo, options);\n    }\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: NzGraphData): void {\n    if (this.dataSource && typeof this.dataSource.disconnect === 'function') {\n      this.nzGraphData.disconnect();\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    this.dataSource = dataSource;\n    this.observeRenderChanges();\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private observeRenderChanges(): void {\n    let dataStream: Observable<NzGraphDataDef> | undefined;\n    let graphOptions: NzGraphOption = {\n      rankDirection: this.nzRankDirection\n    };\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect();\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this.destroy$)).subscribe(data => {\n        graphOptions = {\n          rankDirection: this.nzRankDirection,\n          expanded: this.nzGraphData.expansionModel.selected\n        };\n        this.renderGraph(data, graphOptions);\n        this.cdr.detectChanges();\n      });\n    } else {\n      throw Error(`A valid data source must be provided.`);\n    }\n  }\n\n  private setRenderInfo(renderInfo: NzGraphGroupNode, asPatch: boolean = true): void {\n    if (asPatch) {\n      this.assignRenderInfo(renderInfo);\n    } else {\n      this.renderInfo = renderInfo;\n    }\n    this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this.makeNodesAnimation().subscribe();\n    });\n  }\n\n  private buildGraphInfo(data: NzGraphDataDef, options: NzGraphOption): NzGraphGroupNode {\n    this.parseInfo(data);\n    const renderInfo = buildGraph(data, options, this.layoutSetting) as NzGraphGroupNode;\n    const dig = (nodes: Array<NzGraphNode | NzGraphGroupNode>): void => {\n      nodes.forEach(node => {\n        if (node.type === 1 && this.mapOfNodeAttr.hasOwnProperty(node.name)) {\n          Object.assign(node, this.mapOfNodeAttr[node.name]);\n        } else if (node.type === 0) {\n          (node as NzGraphGroupNode).edges.forEach(edge => {\n            if (this.mapOfEdgeAttr.hasOwnProperty(`${edge.v}-${edge.w}`)) {\n              Object.assign(edge, this.mapOfEdgeAttr[`${edge.v}-${edge.w}`]);\n            }\n          });\n          dig(node.nodes);\n        }\n      });\n    };\n    dig(renderInfo.nodes);\n    // Assign data to edges of root graph\n    renderInfo.edges.forEach(edge => {\n      if (this.mapOfEdgeAttr.hasOwnProperty(`${edge.v}-${edge.w}`)) {\n        Object.assign(edge, this.mapOfEdgeAttr[`${edge.v}-${edge.w}`]);\n      }\n    });\n    return renderInfo;\n  }\n\n  private resizeNodes(renderInfo: NzGraphGroupNode, options: NzGraphOption): void {\n    this.ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        const dataSource: NzGraphDataDef = this.dataSource!.dataSource!;\n        this.elementRef.nativeElement.querySelectorAll('[nz-graph-node]').forEach((nodeEle: HTMLElement) => {\n          const contentEle = nodeEle.querySelector('.nz-graph-node-wrapper');\n          if (contentEle) {\n            const height = contentEle.getBoundingClientRect().height;\n            const width = contentEle.getBoundingClientRect().width;\n            // Element id type is string\n            const targetNode = flattenNodes(renderInfo).find(n => `${n.name}` === nodeEle.id);\n            const nodeName = targetNode && targetNode.name;\n            const node = dataSource.nodes.find(n => n.id === nodeName);\n\n            if (node) {\n              node.height = height / this.nzZoom;\n              node.width = width / this.nzZoom;\n            }\n          }\n        });\n        const newRenderInfo = this.buildGraphInfo(dataSource, options);\n        this.setRenderInfo(newRenderInfo, false);\n      });\n  }\n\n  private assignRenderInfo(renderInfo: NzGraphGroupNode): void {\n    this.renderInfo.edges = renderInfo.edges;\n    this.renderInfo.nodes.forEach((node: NzGraphNode | NzGraphGroupNode, index: number) => {\n      Object.assign(node, renderInfo.nodes[index]);\n    });\n  }\n\n  private makeNodesAnimation(): Observable<void> {\n    return forkJoin(...this.graphNodes.map(node => node.makeAnimation())).pipe(\n      tap(() => {\n        this.drawMinimap();\n      }),\n      finalize(() => {\n        this.cdr.detectChanges();\n      })\n    );\n  }\n\n  private parseInfo(data: NzGraphDataDef): void {\n    data.nodes.forEach(n => {\n      this.mapOfNodeAttr[n.id] = n;\n    });\n    data.edges.forEach(e => {\n      this.mapOfEdgeAttr[`${e.v}-${e.w}`] = e;\n    });\n  }\n\n  private drawMinimap(forceRerender: boolean = false): void {\n    if (!this.minimap || !this.nzShowMinimap) {\n      return;\n    }\n    if (forceRerender) {\n      this.minimap?.init(\n        this.svgContainerComponent.containerElement.nativeElement,\n        this.svgContainerComponent.zoomElement.nativeElement,\n        this.svgContainerComponent.zoomController\n      );\n    } else {\n      this.minimap?.update();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzGraphEdge, NzGraphGroupNode, NzGraphNode } from './interface';\n\nexport function flattenNodes(renderInfo: NzGraphGroupNode): Array<NzGraphGroupNode | NzGraphNode> {\n  const nodes: Array<NzGraphNode | NzGraphGroupNode> = [];\n  let edges: NzGraphEdge[] = [];\n  const dig = (node: NzGraphGroupNode | NzGraphNode): void => {\n    nodes.push(node);\n    if (node.type === 0) {\n      edges = edges.concat(node.edges);\n      (node as NzGraphGroupNode).nodes.forEach(n => dig(n));\n    }\n  };\n  dig(renderInfo);\n  return [...nodes];\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzSpinModule } from 'ng-zorro-antd/spin';\nimport { NzCustomGraphNodeDirective } from './custom-graph-node.directive';\nimport { NzGraphDefsComponent } from './graph-defs.component';\nimport { NzGraphEdgeDirective } from './graph-edge.directive';\nimport { NzGraphMinimapComponent } from './graph-minimap.component';\nimport { NzGraphNodeDirective } from './graph-node.directive';\nimport { NzGraphSvgContainerComponent } from './graph-svg-container.component';\nimport { NzGraphComponent } from './graph.component';\n\nconst COMPONENTS = [\n  NzGraphComponent,\n  NzGraphSvgContainerComponent,\n  NzGraphEdgeDirective,\n  NzGraphNodeDirective,\n  NzGraphMinimapComponent,\n  NzGraphDefsComponent,\n  NzCustomGraphNodeDirective\n];\n\n@NgModule({\n  declarations: [...COMPONENTS],\n  imports: [CommonModule, NzIconModule, NzSpinModule],\n  exports: [...COMPONENTS]\n})\nexport class NzGraphModule {}\n"]}